[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CNU Deep Learning",
    "section": "",
    "text": "0.1 Welcome",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "cnu_introduction.html",
    "href": "cnu_introduction.html",
    "title": "2  Introduction",
    "section": "",
    "text": "2.0.1 chatGPT",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "cnu_introduction.html#google-colab",
    "href": "cnu_introduction.html#google-colab",
    "title": "2  Introduction",
    "section": "2.1 Google Colab",
    "text": "2.1 Google Colab\n\n2.1.0.1 User\nI’ll learn these using google colab. can you let me know how to setup the colab environment for this learning\n\n\n2.1.0.2 ChatGPT\nCertainly! Google Colab is an excellent platform for learning and running Python code, especially for bioinformatics. It provides a cloud-based Jupyter notebook environment that comes pre-configured with many scientific libraries. Here’s how to set up and use Google Colab for learning bioinformatics with Python:\n\n\n2.1.1 Step-by-Step Guide to Setting Up Google Colab\n\n2.1.1.1 1. Access Google Colab\n\nGo to Google Colab in your web browser.\nSign in with your Google account.\n\n\n\n2.1.1.2 2. Create a New Notebook\n\nClick on File -&gt; New Notebook to create a new notebook.\n\n\n\n2.1.1.3 3. Install Required Libraries\nGoogle Colab comes with many libraries pre-installed, but you might need to install some additional ones, such as biopython and scikit-bio. You can do this using the !pip install command directly in a cell.\n\n!pip install biopython scikit-bio\n\nCollecting biopython\n  Using cached biopython-1.83-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\nCollecting scikit-bio\n  Using cached scikit_bio-0.6.0-cp310-cp310-linux_x86_64.whl\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from biopython) (1.25.2)\nRequirement already satisfied: requests&gt;=2.20.0 in /usr/local/lib/python3.10/dist-packages (from scikit-bio) (2.31.0)\nRequirement already satisfied: decorator&gt;=3.4.2 in /usr/local/lib/python3.10/dist-packages (from scikit-bio) (4.4.2)\nRequirement already satisfied: natsort&gt;=4.0.3 in /usr/local/lib/python3.10/dist-packages (from scikit-bio) (8.4.0)\nRequirement already satisfied: pandas&gt;=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-bio) (2.0.3)\nRequirement already satisfied: scipy&gt;=1.9.0 in /usr/local/lib/python3.10/dist-packages (from scikit-bio) (1.11.4)\nRequirement already satisfied: h5py&gt;=3.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-bio) (3.9.0)\nCollecting hdmedians&gt;=0.14.1 (from scikit-bio)\n  Using cached hdmedians-0.14.2.tar.gz (7.6 kB)\n  Installing build dependencies ... done\n  Getting requirements to build wheel ... done\n  Installing backend dependencies ... done\n  Preparing metadata (pyproject.toml) ... done\nCollecting biom-format (from scikit-bio)\n  Using cached biom-format-2.1.16.tar.gz (11.7 MB)\n  Installing build dependencies ... done\n  Getting requirements to build wheel ... done\n  Preparing metadata (pyproject.toml) ... done\nRequirement already satisfied: Cython&gt;=0.23 in /usr/local/lib/python3.10/dist-packages (from hdmedians&gt;=0.14.1-&gt;scikit-bio) (3.0.10)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas&gt;=1.5.0-&gt;scikit-bio) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas&gt;=1.5.0-&gt;scikit-bio) (2023.4)\nRequirement already satisfied: tzdata&gt;=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas&gt;=1.5.0-&gt;scikit-bio) (2024.1)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.20.0-&gt;scikit-bio) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.20.0-&gt;scikit-bio) (3.7)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.20.0-&gt;scikit-bio) (2.0.7)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests&gt;=2.20.0-&gt;scikit-bio) (2024.2.2)\nRequirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from biom-format-&gt;scikit-bio) (8.1.7)\nRequirement already satisfied: six&gt;=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil&gt;=2.8.2-&gt;pandas&gt;=1.5.0-&gt;scikit-bio) (1.16.0)\nBuilding wheels for collected packages: hdmedians, biom-format\n  Building wheel for hdmedians (pyproject.toml) ... done\n  Created wheel for hdmedians: filename=hdmedians-0.14.2-cp310-cp310-linux_x86_64.whl size=677344 sha256=bdb59a5a7f3c50595338eddb9ba2543154a22768d26ebef426620812d70b7ac5\n  Stored in directory: /root/.cache/pip/wheels/82/8f/0d/0c61130cfad119482ebb95aecf8d5dfaddd0181f5680da2bec\n  Building wheel for biom-format (pyproject.toml) ... done\n  Created wheel for biom-format: filename=biom_format-2.1.16-cp310-cp310-linux_x86_64.whl size=12163349 sha256=d12440641a1d66f7dacf66cc4ac6389f129345dcb6f49f158641670e2fa9afdc\n  Stored in directory: /root/.cache/pip/wheels/8e/a9/f9/197fd5a0e5bbab5f2e03c89194f6c194bed7af5d7a8c8759f3\nSuccessfully built hdmedians biom-format\nInstalling collected packages: hdmedians, biopython, biom-format, scikit-bio\nSuccessfully installed biom-format-2.1.16 biopython-1.83 hdmedians-0.14.2 scikit-bio-0.6.0\n\n\n\n\n2.1.1.4 4. Import Libraries and Verify Installation\nIn a new code cell, import the libraries to ensure they are installed correctly.\n\n# Importing necessary libraries\nimport Bio\nimport skbio\n\nprint(\"Biopython version:\", Bio.__version__)\nprint(\"scikit-bio version:\", skbio.__version__)\n\nModuleNotFoundError: No module named 'Bio'\n\n\n\n\n2.1.1.5 5. Upload Files to Colab\n\n구글 드라이브에 2024-cnu-lecture 폴더를 만들기\n공유된 파일 2024-cnu-lecture 폴더에 복사후 open\n분석을 위한 ganbank 파일 ncbi에서 다운로드\n구글 드라이브의 위 디렉토리에 genbank 파일 복사 또는 다음 코드로 로컬 파일을 업로드 가능\n\n\n!pwd\n\n/content\n\n\n\nimport os\nos.chdir('drive/MyDrive/2024-cnu-lecture')\n\n\n!pwd\n\n/content/drive/MyDrive/2024-cnu-lecture\n\n\n\nfrom google.colab import files\n\nuploaded = files.upload()\n\n# Listing the uploaded files\nfor filename in uploaded.keys():\n    print(filename)\n\n\n     \n     \n      Upload widget is only available when the cell has been executed in the\n      current browser session. Please rerun this cell to enable.\n      \n       \n\n\n\n\n\nimage.png\n\n\n\n\n2.1.1.6 6. Example: Reading a GenBank File and Analyzing Sequences\nHere’s an example workflow that reads a GenBank file, performs sequence analysis with Biopython, and aligns sequences with scikit-bio:\nUpload your GenBank file first, and then use the following code:\n\nfrom Bio import SeqIO\nfrom Bio.Seq import Seq\nfrom skbio import Protein\nfrom skbio.alignment import global_pairwise_align_protein\n\n# Assuming the uploaded GenBank file is named 'example.gb'\ngenbank_file = 'egfp.gb'\n\n# Read a protein sequence from a GenBank file\nrecord = SeqIO.read(genbank_file, \"genbank\")\nprint(len(record.seq))\n\nprotein_seq = record.seq.translate()\nprint(protein_seq)\n\n# Perform alignment with another protein sequence\nseq1 = Protein(str(protein_seq))\nseq2 = Protein(\"MKVLYNLKDG\")\n\nalignment, score, start_end_positions = global_pairwise_align_protein(seq1, seq2)\n\nprint(\"Alignment:\\n\", alignment)\nprint(\"Score:\", score)\nprint(\"Start-End Positions:\", start_end_positions)\n\n1150\nMSRVSKGEELFTGVVPILVELDGDVNGHKFSVSGEGEGDATYGKLTLKFICTTGKLPVPWPTLVTTLTYGVQCFSRYPDHMKQHDFFKSAMPEGYVQEVDLCILLS*EVELFPFCVLQLQMEIHRDTRGFCLVLSFVLVVN*KFIHLQEINSLLFKSKGLTYVSVKHWIPKNSKMR*GIFNLVWTSNRLG*PPVKLQQDCLLTQCLRSDVQ*LVLFHFALDFLFANELCF*WFSLFWCVENHLLQGRRQLQDPRRGEVRGRHPGEPHRAEGHRLQGGRQHPGAQAGVQLQQPQRLYHGRQAEERHQGELQDPPQHRGRQRAARRPLPAEHPHRRRPRAAARQPLPEHPVRPEQRPQREARSHGPAGVRDRRRDHSRHGRAVQV\nAlignment:\n TabularMSA[Protein]\n-----------------------------------------------------------------------\nStats:\n    sequence count: 2\n    position count: 384\n-----------------------------------------------------------------------\nMSRVSKGEELFTGVVPILVEL-DGDVNGHKFSV ... PEQRPQREARSHGPAGVRDRRRDHSRHGRAVQV\n--------------MKVLYNLKDG--------- ... ---------------------------------\nScore: 18.0\nStart-End Positions: [(0, 382), (0, 9)]\n\n\n/usr/local/lib/python3.10/dist-packages/Bio/Seq.py:2880: BiopythonWarning: Partial codon, len(sequence) not a multiple of three. Explicitly trim the sequence or add trailing N before translation. This may become an error in future.\n  warnings.warn(\n/usr/local/lib/python3.10/dist-packages/skbio/alignment/_pairwise.py:538: EfficiencyWarning: You're using skbio's python implementation of Needleman-Wunsch alignment. This is known to be very slow (e.g., thousands of times slower than a native C implementation). We'll be adding a faster version soon (see https://github.com/scikit-bio/scikit-bio/issues/254 to track progress on this).\n  warn(\n\n\n\n\n\n2.1.2 7. Saving Your Work\nYou can save your notebook to Google Drive:\n\nClick on File -&gt; Save a copy in Drive.\n\n\n\n2.1.3 8. Sharing Your Notebook\nYou can share your notebook with others by clicking on the Share button in the top right corner and setting the appropriate sharing permissions.\n\n\n2.1.4 Example Colab Notebook\nHere’s a more comprehensive example notebook that includes reading files, sequence analysis, and visualization:\n# Example data for visualization\ndata = {\n    'Sequence': ['Seq1', 'Seq2', 'Seq3'],\n    'GC_Content': [50, 55, 45],\n    'Length': [20, 22, 18]\n}\n\n# Visualize using Seaborn\ndf = pd.DataFrame(data)\nsns.histplot(df['GC_Content'], kde=True)\nplt.title('GC Content Distribution')\nplt.xlabel('GC Content (%)')\nplt.show()\n\nsns.boxplot(x=df['Length'])\nplt.title('Sequence Length Distribution')\nplt.xlabel('Length (bp)')\nplt.show()\nThis notebook covers: - Installing and importing bioinformatics libraries. - Uploading and reading files. - Performing sequence analysis. - Visualizing data.\nBy following these steps and examples, you’ll be well-prepared to use Google Colab for your bioinformatics learning and research.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Example data for visualization\ndata = {\n    'Sequence': ['Seq1', 'Seq2', 'Seq3'],\n    'GC_Content': [50, 55, 45],\n    'Length': [20, 22, 18]\n}\n\n# Visualize using Seaborn\ndf = pd.DataFrame(data)\nsns.histplot(df['GC_Content'], kde=True)\nplt.title('GC Content Distribution')\nplt.xlabel('GC Content (%)')\nplt.show()\n\nsns.boxplot(x=df['Length'])\nplt.title('Sequence Length Distribution')\nplt.xlabel('Length (bp)')\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "cnu_basic.html",
    "href": "cnu_basic.html",
    "title": "3  Chapter 1 Basics",
    "section": "",
    "text": "충남대학교, 기계학습 기반 서열 분석\n공유된 파일 2024-cnu-lecture 폴더에 복사후 open\n\n\n3.0.0.1 구글 드라이브 연결 (세션이 다시 시작 될 때에도 실행 필요)\n\n!pwd\n\n/content\n\n\n\nfrom google.colab import drive\nimport os\n\ndrive.mount('/content/drive')\nos.chdir('drive/MyDrive/2024-cnu-lecture')\n\nMounted at /content/drive\n\n\n\n!pwd\n\n/content/drive/MyDrive/2024-cnu-lecture\n\n\n\n\n3.0.0.2 User:\nOkay, I’ll learn “1. Basic Python Programming”. Can you teach me with a brief explanation and examples\n\n\n3.0.0.3 chaGPT\nAbsolutely! Let’s start with the basics of Python programming. I’ll cover fundamental concepts with brief explanations and examples to get you started.\n\n\n3.0.1 1. Python Syntax and Semantics\n\n3.0.1.1 Hello World\nThe simplest Python program:\n\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\n\n3.0.1.2 Variables and Data Types\nPython supports various data types including integers, floats, strings, and booleans.\n\n# Integer\na = 10\n\n# Float\nb = 3.14\n\n# String\nc = \"Hello, Python\"\n\n# Boolean\nd = True\n\nprint(a, b, c, d)\n\n10 3.14 Hello, Python True\n\n\n\n\n\n3.0.2 2. Control Structures\n\n3.0.2.1 If-Else Statements\nUsed for decision making.\n\nx = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is 5 or less\")\n\nx is greater than 5\n\n\n\n\n3.0.2.2 Loops\nFor repeating tasks.\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n0\n1\n2\n3\n4\n\n\n\n\n\n3.0.3 3. Functions\n\n3.0.3.1 Defining Functions\nReusable blocks of code.\n\ndef greet(name):\n    return f\"Hello, {name}\"\n\nprint(greet(\"Alice\"))\n\nHello, Alice\n\n\n\nprint (\"my name is Alice\")\n\nmy name is Alice\n\n\n\nfor names in names:\n  print (\"My name is \", name1)\n\nNameError: name 'names' is not defined\n\n\n\n\n3.0.3.2 f-string\n\nf와 {} 조합으로 표현할 수 있으며 출력이 고정된 문자열 맨 앞에 f를 붙여주고, 출력하고 싶은 변수값 등은 중괄호로 표현\n\n\nname = \"Alice\"\nmystr = f\"My name is {name}\"\n\nprint(mystr)\n\nMy name is Alice\n\n\n\nnames = [\"Alice\", \"Alisa\", \"Alister\"]\nmystr = f\"My name is {names}\"\n\nprint(mystr)\n\nMy name is ['Alice', 'Alisa', 'Alister']\n\n\n\nnames = [\"Alice\", \"Alisa\", \"Alister\"]\n\nfor name in names:\n  mystr = f\"My name is {name}\"\n  print(mystr)\n\nMy name is Alice\nMy name is Alisa\nMy name is Alister\n\n\n\n\n\n3.0.4 4. Lists and Dictionaries\n\n3.0.4.1 Lists (리스트)\n\nOrdered, mutable collections.\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Accessing elements\nfruits.append(\"date\")  # Adding an element\nprint(fruits)\n\napple\n['apple', 'banana', 'cherry', 'date']\n\n\n\n인덱싱은 값 자체 (1은 두 번째값)\n슬라이싱은 값 사이 경계선 (1은 첫 번째 값과 두 번째 값 사이)\n\n\n\n\nindexing\n\n\n\ngeneids = [x for x in range(10)] # 리스트 컴프리헨션\nprint(geneids)\nprint(geneids[0])\nprint(geneids[-1])\nprint(geneids[2:5])\nprint(geneids[2:-3])\nprint(geneids[:])\nprint(geneids[:-1])\nprint(geneids[1:])\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n0\n9\n[2, 3, 4]\n[2, 3, 4, 5, 6]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n리스트 데이터 삽입 삭제\n\n\ngeneids = [1, 2, 3]\nprint(geneids)\ngeneids.append(4)\nprint(geneids)\nprint(\"length: %d\" % len(geneids))\ngeneids[len(geneids):] = [5]\nprint(geneids)\nprint(geneids.pop())\nprint(geneids)\n\n[1, 2, 3]\n[1, 2, 3, 4]\nlength: 4\n[1, 2, 3, 4, 5]\n5\n[1, 2, 3, 4]\n\n\n\n\n3.0.4.2 Tuple (튜플)\n\n리스트와 같은 기능이지만 ‘(’, ’)’를 사용하고 원소를 변경할 수 없음\n\n리스트보다 빠른 속도, 리스트와 동일한 인덱싱 방법\n\n\ngeneids = (1, 2, 3)\nprint(geneids[0:2])\n#geneids[0] = 4 ## error\n\n(1, 2)\n\n\n\n반복문에서 리스트 또는 튜플 활용\n\n\ngeneids = ['123', '456', '789']\nfor geneid in geneids:\n  print(f\"geneid: {geneid}\")\n\ngeneid: 123\ngeneid: 456\ngeneid: 789\n\n\n\n\n3.0.4.3 Dictionaries\n\nKey-value pairs, unordered.\n\n\nperson = {\"name\": \"Alice\", \"age\": 25}\nprint(person[\"name\"])\nperson[\"age\"] = 26  # Updating value\nprint(person)\n\nAlice\n{'name': 'Alice', 'age': 26}\n\n\n\n키(key)와 값(value)을 쌍으로 저장, ‘{’와’}’를 사용\n\n\ngene_expr = {}\ngene_expr['A'] = 0.5\nprint(gene_expr)\ngene_expr['B'] = 1.2\nprint(gene_expr)\nprint(len(gene_expr))\n\n{'A': 0.5}\n{'A': 0.5, 'B': 1.2}\n2\n\n\n\n인덱싱은 ‘[’, ’]’ 사용, 키 값으로 인덱싱, 정수값 인덱싱 불가\n\n\nprint(gene_expr['A'])\n## gene_expr[0] # error\n\n0.5\n\n\n\n데이터 추가는 key값 value값으로 수행, 삭제는 del 함수 이용\n\n\ngene_expr['C'] = 0.3\nprint(gene_expr)\ndel gene_expr['C']\nprint(gene_expr)\n\n{'A': 0.5, 'B': 1.2, 'C': 0.3}\n{'A': 0.5, 'B': 1.2}\n\n\n\nkey 값과 value 값 구하기\n\n\ngene_expr_keys = list(gene_expr.keys())\nprint(\"keys:\", gene_expr_keys)\ngene_expr_values = list(gene_expr.values())\nprint(\"values:\", gene_expr_values)\n\nkeys: ['A', 'B']\nvalues: [0.5, 1.2]\n\n\n\nin 활용 키 값 탐색\n\n\nprint('D' in gene_expr_keys)\nprint('D' in gene_expr)\nprint('A' in gene_expr)\n\nFalse\nFalse\nTrue\n\n\n\n반복문에서 딕셔너리 활용 items()\n\n\ngene_expr = {'A':0.5, 'B':1.2, 'C':0.3, 'D':3.2}\nfor key, val in gene_expr.items():\n  print(f\"{key} expression value is {val}\")\n  #print(\"%s expression value is %s\" %(geneid, expval))\n\nA expression value is 0.5\nB expression value is 1.2\nC expression value is 0.3\nD expression value is 3.2\n\n\n\n\n\n3.0.5 5. Modules and Packages\n\n3.0.5.1 Importing Modules\nUsing standard libraries.\n\nimport math\n\nprint(math.sqrt(16))\n\n4.0\n\n\n\n\n3.0.5.2 Importing Specific Functions\n\nfrom math import sqrt\n\nprint(sqrt(25))\n\n5.0\n\n\n\n\n\n3.0.6 6. File I/O\n\n3.0.6.1 Writing to a File\n\nwith open('example.txt', 'w') as file:\n    file.write(\"Hello, World!\")\n\n\n\n3.0.6.2 Reading from a File\n\n\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\nHello, World!\n\n\n\n\n\n3.0.7 Example: Basic DNA Sequence Manipulation\nLet’s put some of these concepts together with a simple example that manipulates a DNA sequence.\n\n# Define a DNA sequence\ndna_seq = \"ATGCGTACGTAGCTAGCTAG\"\n\n# Function to compute GC content\ndef gc_content(seq):\n    gc_count = seq.count('G') + seq.count('C')\n    return gc_count / len(seq) * 100\n\n# Function to get the reverse complement of the sequence\ndef reverse_complement(seq):\n    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n    return ''.join(complement[base] for base in reversed(seq))\n\n# Compute GC content\ngc = gc_content(dna_seq)\nprint(f\"GC Content: {gc:.2f}%\")\n\n# Get reverse complement\nrev_comp = reverse_complement(dna_seq)\nprint(f\"Reverse Complement: {rev_comp}\")\n\nGC Content: 50.00%\nReverse Complement: CTAGCTAGCTACGTACGCAT\n\n\n\n\"mystringm\",count(\"m\")\n\nNameError: name 'count' is not defined\n\n\n\n\n3.0.8 Explanation:\n\nDNA Sequence: We define a DNA sequence as a string.\nGC Content Function: Calculates the percentage of ‘G’ and ‘C’ bases in the sequence.\nReverse Complement Function: Creates the reverse complement of the DNA sequence using a dictionary for base pairing.\n\nThis covers the basics of Python programming. As you practice more, you’ll get comfortable with these concepts and can start exploring more advanced topics. If you have specific questions or need further examples, feel free to ask!\n\n3.0.8.1 String join (문자열 붙이기)\n\nseq1 = \"ATGC\"\nseq2 = \"TAGC\"\ndna_seq = seq1 + seq2\n\nfor base in dna_seq:\n  print(base)\n\nprint(type(dna_seq))\n\nA\nT\nG\nC\nT\nA\nG\nC\n&lt;class 'str'&gt;\n\n\n\ncomplement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n\nfor base in dna_seq:\n  print(complement [base])\n\ndna_seq_list = []\nfor base in dna_seq:\n  dna_seq_list.append(complement[base])\n\nprint(dna_seq_list)\nprint(type(dna_seq_list))\n\ndna_seq_comp = \"\".join (dna_seq_list)\nprint(dna_seq_comp)\nprint(type(dna_seq_comp))\n\nT\nA\nC\nG\nA\nT\nC\nG\n['T', 'A', 'C', 'G', 'A', 'T', 'C', 'G']\n&lt;class 'list'&gt;\nTACGATCG\n&lt;class 'str'&gt;\n\n\n\ncomplement [\"C\"]\n\n'G'\n\n\n\ndna_seq\n\n'ATGCTAGC'\n\n\n\ndna_seq_list = [complement[base] for base in dna_seq]\nprint(dna_seq_list)\n\ndna_seq_comp = \"\".join(dna_seq_list)\nprint(dna_seq_comp)\n\nprint(\"\".join([complement[base] for base in dna_seq]))\nprint(\"\".join([complement[base] for base in dna_seq if base == \"A\" or base == \"T\"]))\n\n['T', 'A', 'C', 'G', 'A', 'T', 'C', 'G']\nTACGATCG\nTACGATCG\nTAAT\n\n\n\n\n\n3.0.9 Example: Library generation\n\n3.0.9.1 User\nI want to generate mutant library of a protein. I have a nucleotide genbank file for the target protein. I wan to generate all the mutants by changing synonymous codons for each residue. can you give me the python code?\n\n\n3.0.9.2 ChatGPT\nCertainly! To generate a mutant library by changing synonymous codons for each residue of a protein, we’ll need to:\n\nRead the nucleotide sequence from a GenBank file.\nTranslate the nucleotide sequence to a protein sequence.\nIdentify synonymous codons for each amino acid.\nGenerate all possible synonymous mutants for the target protein.\n\nHere is the Python code that accomplishes these tasks:\n\n\n\n3.0.10 Step-by-Step Code\n\n3.0.10.1 Install Necessary Libraries\nMake sure you have Biopython installed:\n\n!pip install biopython\n\nCollecting biopython\n  Downloading biopython-1.83-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.1/3.1 MB 26.0 MB/s eta 0:00:00\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from biopython) (1.25.2)\nInstalling collected packages: biopython\nSuccessfully installed biopython-1.83\n\n\n\n\n3.0.10.2 Python Script to Generate Synonymous Mutant Library\n\nfrom Bio import SeqIO\nfrom Bio.Seq import Seq\nfrom itertools import product\n\n# Synonymous codon table\nsynonymous_codons = {\n    'F': ['TTT', 'TTC'],\n    'L': ['TTA', 'TTG', 'CTT', 'CTC', 'CTA', 'CTG'],\n    'I': ['ATT', 'ATC', 'ATA'],\n    'M': ['ATG'],\n    'V': ['GTT', 'GTC', 'GTA', 'GTG'],\n    'S': ['TCT', 'TCC', 'TCA', 'TCG', 'AGT', 'AGC'],\n    'P': ['CCT', 'CCC', 'CCA', 'CCG'],\n    'T': ['ACT', 'ACC', 'ACA', 'ACG'],\n    'A': ['GCT', 'GCC', 'GCA', 'GCG'],\n    'Y': ['TAT', 'TAC'],\n    'H': ['CAT', 'CAC'],\n    'Q': ['CAA', 'CAG'],\n    'N': ['AAT', 'AAC'],\n    'K': ['AAA', 'AAG'],\n    'D': ['GAT', 'GAC'],\n    'E': ['GAA', 'GAG'],\n    'C': ['TGT', 'TGC'],\n    'W': ['TGG'],\n    'R': ['CGT', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG'],\n    'G': ['GGT', 'GGC', 'GGA', 'GGG'],\n    '*': ['TAA', 'TAG', 'TGA']\n}\n\n# Function to read the GenBank file and extract the coding sequence\ndef read_cds_from_genbank(file_path):\n    record = SeqIO.read(file_path, \"genbank\")\n    for feature in record.features:\n        if feature.type == \"CDS\":\n            return feature.location.extract(record).seq\n    raise ValueError(\"No CDS found in the GenBank file.\")\n\n# Function to generate synonymous mutants\ndef generate_synonymous_mutants(cds_seq):\n    protein_seq = cds_seq.translate()\n    codon_options = []\n\n    for aa in protein_seq[:5]:\n        codons = synonymous_codons.get(aa, [])\n        if not codons:\n            raise ValueError(f\"Unknown amino acid {aa} encountered.\")\n        codon_options.append(codons)\n\n    # Generate all combinations of synonymous codons\n    all_mutants = list(product(*codon_options))\n    return [''.join(mutant) for mutant in all_mutants]\n\n# Main function\ndef main(genbank_file, output_file):\n    cds_seq = read_cds_from_genbank(genbank_file)\n    mutants = generate_synonymous_mutants(cds_seq)\n\n    # Write the mutants to a FASTA file\n    with open(output_file, 'w') as f:\n        for i, mutant in enumerate(mutants):\n            f.write(f\"&gt;Mutant_{i+1}\\n{mutant}\\n\")\n\n# Example usage\ngenbank_file = 'egfp.gb'  # Replace with your GenBank file path\noutput_file = 'mutant_library.fasta'\nmain(genbank_file, output_file)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'egfp.gb'\n\n\n\n!pwd\n\n/content/drive/MyDrive/2024-cnu-lecture\n\n\n\n위 코드를 두 개의 파일로 나누고 모듈로 사용 실습",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Chapter 1 Basics</span>"
    ]
  },
  {
    "objectID": "cnu_data_handling.html",
    "href": "cnu_data_handling.html",
    "title": "4  Chapter 2 Data handling",
    "section": "",
    "text": "충남대학교, 기계학습 기반 서열 분석\n공유된 파일 2024-cnu-lecture 폴더에 복사후 open\n\n\n4.0.0.1 구글 드라이브 연결 (세션이 다시 시작 될 때에도 실행 필요)\n\n!pwd\n\n/content\n\n\n\nfrom google.colab import drive\nimport os\n\ndrive.mount('/content/drive')\nos.chdir('drive/MyDrive/2024-cnu-lecture')\n\nMounted at /content/drive\n\n\n\n!pwd\n\n/content/drive/MyDrive/2024-cnu-lecture\n\n\n\n\n4.0.0.2 User:\nI want to learn “2. Data Handling and Analysis”. can you explain me a brief explanation and examples?\n\n\n4.0.0.3 ChatGPT\nSure! Data handling and analysis are essential skills in Python, especially for tasks like manipulating datasets, performing statistical analyses, and creating visualizations. We’ll focus on the key libraries used for these purposes: NumPy, Pandas, and Matplotlib/Seaborn.\n\n\n4.0.1 1. NumPy\nNumPy is a powerful library for numerical operations and handling arrays.\n\n4.0.1.1 Basics of NumPy\nInstallation:\n!pip install numpy\n\nimport numpy as np\n\n\n# Creating a 1D array\narr1 = np.array([1, 2, 3, 4, 5])\n\n# Creating a 2D array\narr2 = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(arr1)\nprint(arr2)\n\n\n# Element-wise operations\narr3 = arr1 * 2\nprint(arr3)\n\n# Mathematical functions\nprint(np.sqrt(arr1))\n\n[1 2 3 4 5]\n[[1 2 3]\n [4 5 6]]\n[ 2  4  6  8 10]\n[1.         1.41421356 1.73205081 2.         2.23606798]\n\n\n\n\n\n5 Numpy 자료구조 ndarray\n\n행렬이나 다차원 배열 처리용 파이썬 라이브러리\n같은 타입의 데이터만 허용\n리스트에 비해 20배 이상 빠른 속도\n\n\n\n\nfrom https://www.oreilly.com/library/view/elegant-scipy/9781491922927/ch01.html\n\n\n\nimport numpy as np\n\n\narr = [1, 2, 3]\nprint(arr)\nprint(type(arr))\n\na = np.array([1,2,3])\nprint(a)\nprint(a.dtype)\nprint(a.shape)\nprint(type(a))\n\n[1, 2, 3]\n&lt;class 'list'&gt;\n[1 2 3]\nint64\n(3,)\n&lt;class 'numpy.ndarray'&gt;\n\n\n\narr2 = np.array([[1,2,3], [4,5,6]])\nprint(arr2)\nprint(type(arr2))\nprint(arr2.shape)\nprint(arr2.dtype)\n\n[[1 2 3]\n [4 5 6]]\n&lt;class 'numpy.ndarray'&gt;\n(2, 3)\nint64\n\n\n\nnumpy 자료형\n부호가 있는 정수 int(8, 16, 32, 64)\n부호가 없는 정수 uint(8 ,16, 32, 54)\n실수 float(16, 32, 64, 128)\n복소수 complex(64, 128, 256)\n불리언 bool\n문자열 string_\n파이썬 오프젝트 object\n유니코드 unicode_\nnp.zeros(), np.ones(), np.arange()\n행렬 연산 지원\n\n\na = np.arange(1, 10).reshape(3,3) # [1, 10)\nprint(a)\na = np.ones((3,4), dtype=np.int16)\nb = np.ones((3,4), dtype=np.int16)\nprint(a)\nprint(b)\nprint(a+b)\nprint(a-b)\n\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n[[1 1 1 1]\n [1 1 1 1]\n [1 1 1 1]]\n[[1 1 1 1]\n [1 1 1 1]\n [1 1 1 1]]\n[[2 2 2 2]\n [2 2 2 2]\n [2 2 2 2]]\n[[0 0 0 0]\n [0 0 0 0]\n [0 0 0 0]]\n\n\n\nnumpy 함수\nnp.sqrt()\nnp.log()\nnp.square()\nnp.log()\nnp.ceil()\nnp.floor()\nnp.isnan()\nnp.sum()\nnp.mean()\nnp.std()\nnp.min()\n\n\n\n6 Pandas 자료구조 (Series, DataFrame)\n\nPandas의 Series는 1차원, DataFrame은 2차원 데이터를 다루는 자료구조\nDataFrames are the primary data structure in pandas, representing tabular data with rows and columns.\n일반적으로 column은 변수, row는 샘플\n리스트와 딕셔너리의 조합형\n숫자형, 문자형, 범주형 등의 다양한 데이터 입력 가능\n\n\nfrom pandas import Series, DataFrame\n\n\ngenes = Series([0.1, 0.2, 1.4, 0.6, 1.1])\nprint(genes)\n\n0    0.1\n1    0.2\n2    1.4\n3    0.6\n4    1.1\ndtype: float64\n\n\n\ngenes = Series([0.1, 0.2, 1.4, 0.6, 1.1], index=['A', 'B', 'C', 'D', 'E'])\nprint(genes)\n\nA    0.1\nB    0.2\nC    1.4\nD    0.6\nE    1.1\ndtype: float64\n\n\n\n6.0.0.1 Create from a dictionary\n\nimport pandas as pd\n\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35],\n    'Height': [5.5, 6.0, 5.8]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n      Name  Age  Height\n0    Alice   25     5.5\n1      Bob   30     6.0\n2  Charlie   35     5.8\n\n\n\n\n6.0.0.2 Create from a list of dictionary\n\ndata = [\n    {'Name': 'Alice', 'Age': 25, 'Height': 5.5},\n    {'Name': 'Bob', 'Age': 30, 'Height': 6.0},\n    {'Name': 'Charlie', 'Age': 35, 'Height': 5.8}\n]\n\ndf = pd.DataFrame(data)\nprint(df)\n\n      Name  Age  Height\n0    Alice   25     5.5\n1      Bob   30     6.0\n2  Charlie   35     5.8\n\n\n\n인덱스 자동 정렬, 행렬 연산\n\n\ngenes1 = Series([0.1, 0.2, 1.4, 0.6, 1.1], index=['A', 'B', 'C', 'D', 'E'])\ngenes2 = Series([0.1, 0.2, 1.4, 0.6, 1.1], index=['B', 'C', 'D', 'E', 'A'])\ngenes1 + genes2\n\nA    1.2\nB    0.3\nC    1.6\nD    2.0\nE    1.7\ndtype: float64\n\n\n\nprint(genes2.sort_values())\nprint(genes2.sort_index())\n\nB    0.1\nC    0.2\nE    0.6\nA    1.1\nD    1.4\ndtype: float64\nA    1.1\nB    0.1\nC    0.2\nD    1.4\nE    0.6\ndtype: float64\n\n\n\nDataFrame 생성은 ‘{’, ‘}’ 이용\nDataFrame은 Series의 집합\n\n\ngenes = {'A': [0.5, 0.1, 0.3],\n         'B': [0.8, 0.9, 0.4]}\nprint(genes)\ngenes_df = DataFrame(genes)\nprint(genes_df)\nprint(genes_df['A'])\nprint(type(genes_df['A']))\n\n{'A': [0.5, 0.1, 0.3], 'B': [0.8, 0.9, 0.4]}\n     A    B\n0  0.5  0.8\n1  0.1  0.9\n2  0.3  0.4\n0    0.5\n1    0.1\n2    0.3\nName: A, dtype: float64\n&lt;class 'pandas.core.series.Series'&gt;\n\n\n\ngenes = {'A': [0.5, 0.1, 0.3],\n         'B': [0.8, 0.9, 0.4]}\ngenes_df = DataFrame(genes, columns=['B', 'A'], index=['day1', 'day2', 'day3'])\nprint(genes_df)\n\n        B    A\nday1  0.8  0.5\nday2  0.9  0.1\nday3  0.4  0.3\n\n\n\nprint(genes_df['A'])\nprint(genes_df.loc['day1'])\nprint(genes_df.index)\nprint(list(genes_df.columns))\n\nday1    0.5\nday2    0.1\nday3    0.3\nName: A, dtype: float64\nB    0.8\nA    0.5\nName: day1, dtype: float64\nIndex(['day1', 'day2', 'day3'], dtype='object')\n['B', 'A']\n\n\n\n\n6.0.0.3 ChatGPT\nSure! Data handling and analysis are essential skills in Python, especially for tasks like manipulating datasets, performing statistical analyses, and creating visualizations. We’ll focus on the key libraries used for these purposes: NumPy, Pandas, and Matplotlib/Seaborn.\n\n\n6.0.1 1. NumPy\nNumPy is a powerful library for numerical operations and handling arrays.\n\n6.0.1.1 Basics of NumPy\nInstallation:\npip install numpy\nImporting NumPy:\nimport numpy as np\nCreating Arrays:\n# Creating a 1D array\narr1 = np.array([1, 2, 3, 4, 5])\n\n# Creating a 2D array\narr2 = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(arr1)\nprint(arr2)\nArray Operations:\n# Element-wise operations\narr3 = arr1 * 2\nprint(arr3)\n\n# Mathematical functions\nprint(np.sqrt(arr1))\n\n\n\n6.0.2 2. Pandas\nPandas is a powerful library for data manipulation and analysis. It provides data structures like DataFrame, which is similar to tables in databases or spreadsheets.\n\n6.0.2.1 Basics of Pandas\nInstallation:\npip install pandas\nImporting Pandas:\nimport pandas as pd\nCreating DataFrames:\n# From a dictionary\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35],\n    'Height': [5.5, 6.0, 5.8]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\nReading and Writing Data:\n# Reading from a CSV file\ndf = pd.read_csv('data.csv')\nprint(df)\n\n# Writing to a CSV file\ndf.to_csv('output.csv', index=False)\nDataFrame Operations:\n# Selecting columns\nages = df['Age']\nprint(ages)\n\n# Filtering rows\nadults = df[df['Age'] &gt; 18]\nprint(adults)\n\n# Adding a new column\ndf['Weight'] = [65, 70, 75]\nprint(df)\n\n# Grouping and Aggregating\ngrouped = df.groupby('Name').mean()\nprint(grouped)\n\n\n\n6.0.3 3. Matplotlib/Seaborn\nMatplotlib is a plotting library for creating static, animated, and interactive visualizations. Seaborn is built on top of Matplotlib and provides a high-level interface for drawing attractive statistical graphics.\n\n6.0.3.1 Basics of Matplotlib\nInstallation:\npip install matplotlib seaborn\nImporting Matplotlib and Seaborn:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nCreating Plots:\n# Line plot\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Line Plot')\nplt.show()\n\n# Scatter plot with Seaborn\nsns.scatterplot(x='Age', y='Height', data=df)\nplt.title('Age vs Height')\nplt.show()\n\n\n\n6.0.4 Example: Analyzing and Visualizing DNA Sequence Data\nLet’s combine these libraries in a practical example. We’ll read a CSV file containing DNA sequences and their properties, perform some analysis, and visualize the results.\nExample Data (dna_data.csv):\nSequence,Length,GC_Content\nATGCGTACGTAGCTAGCTAG,20,50.0\nGCGTACGTAGCTAGCTAGCA,20,55.0\nTGCATGCATGCTAGCTAGCA,20,45.0\nPython Script:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read the CSV file\ndf = pd.read_csv('dna_data.csv')\n\n# Calculate basic statistics\nmean_gc = df['GC_Content'].mean()\nstd_gc = df['GC_Content'].std()\n\nprint(f\"Mean GC Content: {mean_gc:.2f}%\")\nprint(f\"Standard Deviation of GC Content: {std_gc:.2f}%\")\n\n# Visualize the data\nplt.figure(figsize=(10, 5))\n\n# Histogram of GC content\nplt.subplot(1, 2, 1)\nsns.histplot(df['GC_Content'], kde=True)\nplt.title('GC Content Distribution')\nplt.xlabel('GC Content (%)')\n\n# Boxplot of sequence lengths\nplt.subplot(1, 2, 2)\nsns.boxplot(x=df['Length'])\nplt.title('Sequence Length Distribution')\nplt.xlabel('Length (bp)')\n\nplt.tight_layout()\nplt.show()\n\n\n6.0.5 Explanation:\n\nReading Data: We read the DNA sequence data from a CSV file into a Pandas DataFrame.\nCalculating Statistics: We calculate the mean and standard deviation of the GC content using Pandas.\nVisualizing Data: We create a histogram of the GC content and a boxplot of the sequence lengths using Matplotlib and Seaborn.\n\nThis script demonstrates the integration of data handling, analysis, and visualization in Python. By learning and practicing these concepts, you’ll be well-equipped to handle and analyze biological data.\n\n6.0.5.1 ChatGPT\nSure! Data handling and analysis are essential skills in Python, especially for tasks like manipulating datasets, performing statistical analyses, and creating visualizations. We’ll focus on the key libraries used for these purposes: NumPy, Pandas, and Matplotlib/Seaborn.\n\n\n\n6.0.6 1. NumPy\nNumPy is a powerful library for numerical operations and handling arrays.\n\n6.0.6.1 Basics of NumPy\nInstallation:\npip install numpy\nImporting NumPy:\nimport numpy as np\nCreating Arrays:\n# Creating a 1D array\narr1 = np.array([1, 2, 3, 4, 5])\n\n# Creating a 2D array\narr2 = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(arr1)\nprint(arr2)\nArray Operations:\n# Element-wise operations\narr3 = arr1 * 2\nprint(arr3)\n\n# Mathematical functions\nprint(np.sqrt(arr1))\n\n\n\n6.0.7 2. Pandas\nPandas is a powerful library for data manipulation and analysis. It provides data structures like DataFrame, which is similar to tables in databases or spreadsheets.\n\n6.0.7.1 Basics of Pandas\nInstallation:\npip install pandas\nImporting Pandas:\nimport pandas as pd\nCreating DataFrames:\n# From a dictionary\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35],\n    'Height': [5.5, 6.0, 5.8]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\nReading and Writing Data:\n# Reading from a CSV file\ndf = pd.read_csv('data.csv')\nprint(df)\n\n# Writing to a CSV file\ndf.to_csv('output.csv', index=False)\nDataFrame Operations:\n# Selecting columns\nages = df['Age']\nprint(ages)\n\n# Filtering rows\nadults = df[df['Age'] &gt; 18]\nprint(adults)\n\n# Adding a new column\ndf['Weight'] = [65, 70, 75]\nprint(df)\n\n# Grouping and Aggregating\ngrouped = df.groupby('Name').mean()\nprint(grouped)\n\n\n\n6.0.8 3. Matplotlib/Seaborn\nMatplotlib is a plotting library for creating static, animated, and interactive visualizations. Seaborn is built on top of Matplotlib and provides a high-level interface for drawing attractive statistical graphics.\n\n6.0.8.1 Basics of Matplotlib\nInstallation:\npip install matplotlib seaborn\nImporting Matplotlib and Seaborn:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nCreating Plots:\n# Line plot\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Line Plot')\nplt.show()\n\n# Scatter plot with Seaborn\nsns.scatterplot(x='Age', y='Height', data=df)\nplt.title('Age vs Height')\nplt.show()\n\n\n\n6.0.9 Example: Analyzing and Visualizing DNA Sequence Data\nLet’s combine these libraries in a practical example. We’ll read a CSV file containing DNA sequences and their properties, perform some analysis, and visualize the results.\nExample Data (dna_data.csv):\nSequence,Length,GC_Content\nATGCGTACGTAGCTAGCTAG,20,50.0\nGCGTACGTAGCTAGCTAGCA,20,55.0\nTGCATGCATGCTAGCTAGCA,20,45.0\nPython Script:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read the CSV file\ndf = pd.read_csv('dna_data.csv')\n\n# Calculate basic statistics\nmean_gc = df['GC_Content'].mean()\nstd_gc = df['GC_Content'].std()\n\nprint(f\"Mean GC Content: {mean_gc:.2f}%\")\nprint(f\"Standard Deviation of GC Content: {std_gc:.2f}%\")\n\n# Visualize the data\nplt.figure(figsize=(10, 5))\n\n# Histogram of GC content\nplt.subplot(1, 2, 1)\nsns.histplot(df['GC_Content'], kde=True)\nplt.title('GC Content Distribution')\nplt.xlabel('GC Content (%)')\n\n# Boxplot of sequence lengths\nplt.subplot(1, 2, 2)\nsns.boxplot(x=df['Length'])\nplt.title('Sequence Length Distribution')\nplt.xlabel('Length (bp)')\n\nplt.tight_layout()\nplt.show()\n\n\n6.0.10 Explanation:\n\nReading Data: We read the DNA sequence data from a CSV file into a Pandas DataFrame.\nCalculating Statistics: We calculate the mean and standard deviation of the GC content using Pandas.\nVisualizing Data: We create a histogram of the GC content and a boxplot of the sequence lengths using Matplotlib and Seaborn.\n\nThis script demonstrates the integration of data handling, analysis, and visualization in Python. By learning and practicing these concepts, you’ll be well-equipped to handle and analyze biological data.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Chapter 2 Data handling</span>"
    ]
  }
]