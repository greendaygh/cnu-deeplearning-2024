[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CNU Deep Learning",
    "section": "",
    "text": "0.1 Welcome",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "CNU Deep Learning",
    "section": "",
    "text": "2024.5 충남대학교, 기계학습 기반 서열 분석 강의 노트\nChatGTP로 기본 contents를 만들고 검토, 보완하며 작성된 노트\n[User] 태그가 붙은 파란색 텍스트가 프롬프트이며 이 후 [ChatGTP] 태그가 GTP (4.0) 답변\nGPT에 질의한 프롬프트는 초안 수준으로 프롬프트를 정교하게 보강해서 질의할 경우 더 높은 수준의 답변을 얻을 수 있음",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "index.html#환경",
    "href": "index.html#환경",
    "title": "CNU Deep Learning",
    "section": "0.2 환경",
    "text": "0.2 환경\n\n실습 환경은 colab을 활용하며 파일 저장 등은 구글 드라이브를 활용함\n본 github repository에서 ipynb 파일을 다운로드 해서 구글 드라이브 임의의 디렉토리에 (2024-cnu-lecture) 복사 후 활용",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "cnu_introduction.html",
    "href": "cnu_introduction.html",
    "title": "2  Introduction",
    "section": "",
    "text": "Learn python for biological data analysis with chatGPT\nTask specific practice\n다음 코드는 colab의 default working directory에 개인의 google drive를 연결해 주는 기능을 수행\n\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n\n2.0.1 [User]\n I want to learn python and use it for molecular biology research such as design of library sequence, design of experiments, read high-throughput sequencing file, apply deep learning algorithm. What topics do i need to learn? \n\n\n2.0.2 [ChatGPT]\nLearning Python for molecular biology research involves a blend of general programming skills and domain-specific knowledge. Here’s a structured guide on the topics you need to cover:\n\n\n2.0.3 Table of Contents\n\n2.0.3.1 1. Basic Python Programming\n\nPython Syntax and Semantics: Learn basic syntax, data types (strings, lists, dictionaries), control structures (if statements, loops), functions, and error handling.\nModules and Packages: Understand how to import and use standard libraries and third-party packages.\nFile I/O: Learn how to read from and write to files.\n\n\n\n2.0.3.2 2. Data Handling and Analysis\n\nNumPy: For numerical operations and handling arrays.\nPandas: For data manipulation and analysis, essential for handling tabular data, such as gene expression matrices.\nMatplotlib/Seaborn: For data visualization to generate plots and graphs.\n\n\n\n2.0.3.3 3. Bioinformatics Libraries\n\nBiopython: Essential for biological computation. Learn how to read/write sequence files, perform sequence analysis, and interact with biological databases.\nScikit-bio: For biological analysis including sequence alignment, biodiversity analysis, etc.\n\n\n\n2.0.3.4 4. Sequence Analysis\n\nFASTA/FASTQ Parsing: Learn how to parse sequence files.\nSequence Alignment: Understand the basics of sequence alignment (global and local), and tools like BLAST.\nMotif Finding: Learn how to identify sequence motifs.\n\n\n\n2.0.3.5 5. High-Throughput Sequencing Data\n\nHTSeq: For reading and analyzing high-throughput sequencing data.\nPySAM: For reading and manipulating SAM/BAM files (aligned sequencing reads).\nSeqIO: Part of Biopython for input/output of sequence data.\n\n\n\n2.0.3.6 6. Experimental Design\n\nPrimer Design: Understand the principles of primer design and tools available (like Primer3) and their Python interfaces.\nGolden Gate Assembly and Gibson Assembly: Learn the principles and how to design experiments programmatically.\n\n\n\n2.0.3.7 7. Statistical Analysis\n\nSciPy: For scientific and technical computing.\nStatsmodels: For statistical modeling.\nR Integration: Learn how to use R from Python (via rpy2) if you need to use specific R packages for statistical analysis.\n\n\n\n2.0.3.8 8. Machine Learning and Deep Learning\n\nScikit-learn: For machine learning algorithms.\nTensorFlow/Keras or PyTorch: For deep learning.\nBioinformatics-specific models: Learn about models specific to bioinformatics, such as predicting protein structures or gene expression levels.\n\n\n\n2.0.3.9 9. Workflow Automation\n\nSnakemake: For workflow management.\nNextflow: Another workflow management tool, useful for reproducible research.\n\n\n\n2.0.3.10 10. Advanced Topics\n\nData Integration: Integrating different types of biological data (genomic, transcriptomic, proteomic).\nNetwork Biology: Understanding biological networks (e.g., protein-protein interaction networks).\nStructural Bioinformatics: Analyzing protein structures using tools like PyMOL.\n\n\n\n2.0.3.11 Learning Resources\n\nBooks\n\n“Python for Biologists” by Martin Jones\n“Bioinformatics Programming Using Python” by Mitchell L. Model\n\nOnline Courses\n\nCoursera: “Python for Genomic Data Science” by Johns Hopkins University\nedX: “Python for Data Science” by Microsoft\nBiostars: Online forum for bioinformatics questions and tutorials.\n\nTutorials and Documentation\n\nBiopython Tutorial and Cookbook: Comprehensive guide to using Biopython.\nNumPy and Pandas documentation: Essential for data manipulation.\nScikit-learn and TensorFlow/Keras documentation: For machine learning and deep learning.\n\n\nBy following this structured guide, you’ll be able to leverage Python effectively for molecular biology research.\n\n\n\n2.0.4 [User]\n I’ll learn it using google colab. can you let me know how to setup the colab environment for this learning \n\n\n2.0.5 [ChatGPT]\nCertainly! Google Colab is an excellent platform for learning and running Python code, especially for bioinformatics. It provides a cloud-based Jupyter notebook environment that comes pre-configured with many scientific libraries. Here’s how to set up and use Google Colab for learning bioinformatics with Python:\n\n\n2.0.6 Step-by-Step Guide to Setting Up Google Colab\n\n2.0.6.1 1. Access Google Colab\n\nGo to Google Colab in your web browser.\nSign in with your Google account.\n\n\n\n2.0.6.2 2. Create a New Notebook\n\nClick on File -&gt; New Notebook to create a new notebook.\n\n\n\n2.0.6.3 3. Install Required Libraries\nGoogle Colab comes with many libraries pre-installed, but you might need to install some additional ones, such as biopython and scikit-bio. You can do this using the !pip install command directly in a cell.\n\n!pip install biopython scikit-bio\n\n\n\n2.0.6.4 4. Import Libraries and Verify Installation\nIn a new code cell, import the libraries to ensure they are installed correctly.\n\n# Importing necessary libraries\nimport Bio\nimport skbio\n\nprint(\"Biopython version:\", Bio.__version__)\nprint(\"scikit-bio version:\", skbio.__version__)\n\n\n\n2.0.6.5 5. Upload Files to Colab\n\n구글 드라이브에 2024-cnu-lecture 폴더를 만들기\n다운로드 하거나 공유된 (ipynb) 파일을 2024-cnu-lecture 폴더에 복사후 colab으로 open\n분석을 위한 ganbank 파일 ncbi에서 다운로드\n구글 드라이브의 위 디렉토리에 genbank 파일 복사 또는 다음 코드로 로컬 파일을 업로드 가능\n현재 작업 디렉토리 확인\n\n\n!pwd\n\n\n현재 작업 디렉토리를 위 생성한 디렉토리로 변경\n\n\nimport os\nos.chdir('drive/MyDrive/2024-cnu-lecture')\n\n\n!pwd\n\n\n분석을 위한 genbank 등의 파일을 ncbi에서 다운로드 후 위 폴더에 복사\n또는 아래 코드를 이용해서 현재 작업 디렉토리에 업로드\n\n\nfrom google.colab import files\n\nuploaded = files.upload()\n\n# Listing the uploaded files\nfor filename in uploaded.keys():\n    print(filename)\n\n\n\n\nimage.png\n\n\n\n\n2.0.6.6 6. Example: Reading a GenBank File and Analyzing Sequences\n\nHere’s an example workflow that reads a GenBank file, performs sequence analysis with Biopython, and aligns sequences with scikit-bio:\n위에서 다운로드 받은 genbank 파일을 egfp.gb 이름으로 변경 후 업로드\n아래 예시 코드는 단백질 서열을 읽고 비교하는 코드임\n\n\nfrom Bio import SeqIO\nfrom Bio.Seq import Seq\nfrom skbio import Protein\nfrom skbio.alignment import global_pairwise_align_protein\n\n# Assuming the uploaded GenBank file is named 'example.gb'\ngenbank_file = 'egfp.gb'\n\n# Read a protein sequence from a GenBank file\nrecord = SeqIO.read(genbank_file, \"genbank\")\nprint(len(record.seq))\n\nprotein_seq = record.seq.translate()\nprint(protein_seq)\n\n# Perform alignment with another protein sequence\nseq1 = Protein(str(protein_seq))\nseq2 = Protein(\"MKVLYNLKDG\")\n\nalignment, score, start_end_positions = global_pairwise_align_protein(seq1, seq2)\n\nprint(\"Alignment:\\n\", alignment)\nprint(\"Score:\", score)\nprint(\"Start-End Positions:\", start_end_positions)\n\n\n\n2.0.6.7 7. Saving Your Work\nYou can save your notebook to Google Drive:\n\nClick on File -&gt; Save a copy in Drive.\n\n\n\n2.0.6.8 8. Sharing Your Notebook\nYou can share your notebook with others by clicking on the Share button in the top right corner and setting the appropriate sharing permissions.\n\n\n2.0.6.9 9. Example Colab Notebook\nHere’s a more comprehensive example notebook that includes reading files, sequence analysis, and visualization: (다음 코드 참고)\nThis notebook covers: - Installing and importing bioinformatics libraries. - Uploading and reading files. - Performing sequence analysis. - Visualizing data.\nBy following these steps and examples, you’ll be well-prepared to use Google Colab for your bioinformatics learning and research.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Example data for visualization\ndata = {\n    'Sequence': ['Seq1', 'Seq2', 'Seq3'],\n    'GC_Content': [50, 55, 45],\n    'Length': [20, 22, 18]\n}\n\n# Visualize using Seaborn\ndf = pd.DataFrame(data)\nsns.histplot(df['GC_Content'], kde=True)\nplt.title('GC Content Distribution')\nplt.xlabel('GC Content (%)')\nplt.show()\n\nsns.boxplot(x=df['Length'])\nplt.title('Sequence Length Distribution')\nplt.xlabel('Length (bp)')\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "cnu_basic.html",
    "href": "cnu_basic.html",
    "title": "3  Python Basics",
    "section": "",
    "text": "3.0.0.1 구글 드라이브 연결\n\n세션이 다시 시작 될 때에도 실행 필요\n\n\n!pwd\n\n/content\n\n\n\nfrom google.colab import drive\nimport os\n\ndrive.mount('/content/drive')\nos.chdir('drive/MyDrive/2024-cnu-lecture')\n\nMounted at /content/drive\n\n\n\n!pwd\n\n/content/drive/MyDrive/2024-cnu-lecture\n\n\n\n\n3.0.1 [User]\n Okay, I’ll learn “1. Basic Python Programming”. Can you teach me with a brief explanation and examples \n\n\n3.0.2 [ChatGPT]\nAbsolutely! Let’s start with the basics of Python programming. I’ll cover fundamental concepts with brief explanations and examples to get you started.\n\n\n3.0.3 1. Python Syntax and Semantics\n\n3.0.3.1 Hello World\nThe simplest Python program:\n\nprint(\"Hello, World!\")\n\nHello, World!\n\n\n\n\n3.0.3.2 Variables and Data Types\nPython supports various data types including integers, floats, strings, and booleans.\n\n# Integer\na = 10\n\n# Float\nb = 3.14\n\n# String\nc = \"Hello, Python\"\n\n# Boolean\nd = True\n\nprint(a, b, c, d)\n\n10 3.14 Hello, Python True\n\n\n\n\n\n3.0.4 2. Control Structures\n\n3.0.4.1 If-Else Statements\nUsed for decision making.\n\nx = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is 5 or less\")\n\nx is greater than 5\n\n\n\n\n3.0.4.2 Loops\nFor repeating tasks.\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\ni = 0\nwhile i &lt; 5:\n    print(i)\n    i += 1\n\n0\n1\n2\n3\n4\n\n\n\n\n\n3.0.5 3. Functions\n\n3.0.5.1 Defining Functions\nReusable blocks of code.\n\ndef greet(name):\n    return f\"Hello, {name}\"\n\nprint(greet(\"Alice\"))\n\nHello, Alice\n\n\n\nprint (\"my name is Alice\")\n\nmy name is Alice\n\n\n\nfor names in names:\n  print (\"My name is \", name1)\n\nNameError: name 'names' is not defined\n\n\n\n함수에 대한 개념 이해 중요\n실습과 예제를 통해 이해 필요\n\n\n\n3.0.5.2 f-string\n\nf와 {} 조합으로 표현할 수 있으며 출력이 고정된 문자열 맨 앞에 f를 붙여주고, 출력하고 싶은 변수값 등은 중괄호로 표현\n\n\nname = \"Alice\"\nmystr = f\"My name is {name}\"\n\nprint(mystr)\n\nMy name is Alice\n\n\n\nnames = [\"Alice\", \"Alisa\", \"Alister\"]\nmystr = f\"My name is {names}\"\n\nprint(mystr)\n\nMy name is ['Alice', 'Alisa', 'Alister']\n\n\n\nnames = [\"Alice\", \"Alisa\", \"Alister\"]\n\nfor name in names:\n  mystr = f\"My name is {name}\"\n  print(mystr)\n\nMy name is Alice\nMy name is Alisa\nMy name is Alister\n\n\n\n\n\n3.0.6 4. Lists and Dictionaries\n\n리스트나 딕셔너리는 파이썬에서 데이터를 저장하는 변수의 자료형임\n여러 종류의 데이터를 효율적으로 활용하기 위한 자료 구조임\n\n\n3.0.6.1 Lists (리스트)\n\nOrdered, mutable collections.\n\n\nfruits = [\"apple\", \"banana\", \"cherry\"]\nprint(fruits[0])  # Accessing elements\nfruits.append(\"date\")  # Adding an element\nprint(fruits)\n\napple\n['apple', 'banana', 'cherry', 'date']\n\n\n\n인덱싱은 값 자체 (1은 두 번째값)\n슬라이싱은 값 사이 경계선 (1은 첫 번째 값과 두 번째 값 사이)\n아래 그림과 여러 실습 예제를 통한 이해 필요\n\n\n\n\nindexing\n\n\n\ngeneids = [x for x in range(10)] # 리스트 컴프리헨션\nprint(geneids)\nprint(geneids[0])\nprint(geneids[-1])\nprint(geneids[2:5])\nprint(geneids[2:-3])\nprint(geneids[:])\nprint(geneids[:-1])\nprint(geneids[1:])\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n0\n9\n[2, 3, 4]\n[2, 3, 4, 5, 6]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n리스트 데이터 삽입 삭제\n\n\ngeneids = [1, 2, 3]\nprint(geneids)\ngeneids.append(4)\nprint(geneids)\nprint(\"length: %d\" % len(geneids))\ngeneids[len(geneids):] = [5]\nprint(geneids)\nprint(geneids.pop())\nprint(geneids)\n\n[1, 2, 3]\n[1, 2, 3, 4]\nlength: 4\n[1, 2, 3, 4, 5]\n5\n[1, 2, 3, 4]\n\n\n\n\n3.0.6.2 Tuple (튜플)\n\n리스트와 같은 기능이지만 ‘(’, ’)’를 사용하고 원소를 변경할 수 없음\n\n리스트보다 빠른 속도, 리스트와 동일한 인덱싱 방법\n\n\ngeneids = (1, 2, 3)\nprint(geneids[0:2])\n#geneids[0] = 4 ## error\n\n(1, 2)\n\n\n\n반복문에서 리스트 또는 튜플 활용\n\n\ngeneids = ['123', '456', '789']\nfor geneid in geneids:\n  print(f\"geneid: {geneid}\")\n\ngeneid: 123\ngeneid: 456\ngeneid: 789\n\n\n\n\n3.0.6.3 Dictionaries (딕셔너리)\n\nKey-value pairs, unordered.\n\n\nperson = {\"name\": \"Alice\", \"age\": 25}\nprint(person[\"name\"])\nperson[\"age\"] = 26  # Updating value\nprint(person)\n\nAlice\n{'name': 'Alice', 'age': 26}\n\n\n\n키(key)와 값(value)을 쌍으로 저장, ‘{’와’}’를 사용\n\n\ngene_expr = {}\ngene_expr['A'] = 0.5\nprint(gene_expr)\ngene_expr['B'] = 1.2\nprint(gene_expr)\nprint(len(gene_expr))\n\n{'A': 0.5}\n{'A': 0.5, 'B': 1.2}\n2\n\n\n\n인덱싱은 ‘[’, ’]’ 사용, 키 값으로 인덱싱, 정수값 인덱싱 불가\n\n\nprint(gene_expr['A'])\n## gene_expr[0] # error\n\n0.5\n\n\n\n데이터 추가는 key값 value값으로 수행, 삭제는 del 함수 이용\n\n\ngene_expr['C'] = 0.3\nprint(gene_expr)\ndel gene_expr['C']\nprint(gene_expr)\n\n{'A': 0.5, 'B': 1.2, 'C': 0.3}\n{'A': 0.5, 'B': 1.2}\n\n\n\nkey 값과 value 값 구하기\n\n\ngene_expr_keys = list(gene_expr.keys())\nprint(\"keys:\", gene_expr_keys)\ngene_expr_values = list(gene_expr.values())\nprint(\"values:\", gene_expr_values)\n\nkeys: ['A', 'B']\nvalues: [0.5, 1.2]\n\n\n\nin 활용 키 값 탐색\n\n\nprint('D' in gene_expr_keys)\nprint('D' in gene_expr)\nprint('A' in gene_expr)\n\nFalse\nFalse\nTrue\n\n\n\n반복문에서 딕셔너리 활용 items()\n\n\ngene_expr = {'A':0.5, 'B':1.2, 'C':0.3, 'D':3.2}\nfor key, val in gene_expr.items():\n  print(f\"{key} expression value is {val}\")\n  #print(\"%s expression value is %s\" %(geneid, expval))\n\nA expression value is 0.5\nB expression value is 1.2\nC expression value is 0.3\nD expression value is 3.2\n\n\n\n\n\n3.0.7 5. Modules and Packages\n\n3.0.7.1 Importing Modules\nUsing standard libraries.\n\nimport math\n\nprint(math.sqrt(16))\n\n4.0\n\n\n\n\n3.0.7.2 Importing Specific Functions\n\nfrom math import sqrt\n\nprint(sqrt(25))\n\n5.0\n\n\n\n\n\n3.0.8 6. File I/O\n\n3.0.8.1 Writing to a File\n\nwith open('example.txt', 'w') as file:\n    file.write(\"Hello, World!\")\n\n\n\n3.0.8.2 Reading from a File\n\n\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\nHello, World!\n\n\n\n\n\n3.0.9 Example: Basic DNA Sequence Manipulation\nLet’s put some of these concepts together with a simple example that manipulates a DNA sequence.\n\n# Define a DNA sequence\ndna_seq = \"ATGCGTACGTAGCTAGCTAG\"\n\n# Function to compute GC content\ndef gc_content(seq):\n    gc_count = seq.count('G') + seq.count('C')\n    return gc_count / len(seq) * 100\n\n# Function to get the reverse complement of the sequence\ndef reverse_complement(seq):\n    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n    return ''.join(complement[base] for base in reversed(seq))\n\n# Compute GC content\ngc = gc_content(dna_seq)\nprint(f\"GC Content: {gc:.2f}%\")\n\n# Get reverse complement\nrev_comp = reverse_complement(dna_seq)\nprint(f\"Reverse Complement: {rev_comp}\")\n\nGC Content: 50.00%\nReverse Complement: CTAGCTAGCTACGTACGCAT\n\n\n\n\"mystringm\",count(\"m\")\n\nNameError: name 'count' is not defined\n\n\n\n3.0.9.1 String join (문자열 붙이기)\n\nseq1 = \"ATGC\"\nseq2 = \"TAGC\"\ndna_seq = seq1 + seq2\n\nfor base in dna_seq:\n  print(base)\n\nprint(type(dna_seq))\n\nA\nT\nG\nC\nT\nA\nG\nC\n&lt;class 'str'&gt;\n\n\n\ncomplement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}\n\nfor base in dna_seq:\n  print(complement [base])\n\ndna_seq_list = []\nfor base in dna_seq:\n  dna_seq_list.append(complement[base])\n\nprint(dna_seq_list)\nprint(type(dna_seq_list))\n\ndna_seq_comp = \"\".join (dna_seq_list)\nprint(dna_seq_comp)\nprint(type(dna_seq_comp))\n\nT\nA\nC\nG\nA\nT\nC\nG\n['T', 'A', 'C', 'G', 'A', 'T', 'C', 'G']\n&lt;class 'list'&gt;\nTACGATCG\n&lt;class 'str'&gt;\n\n\n\ncomplement [\"C\"]\n\n'G'\n\n\n\ndna_seq\n\n'ATGCTAGC'\n\n\n\ndna_seq_list = [complement[base] for base in dna_seq]\nprint(dna_seq_list)\n\ndna_seq_comp = \"\".join(dna_seq_list)\nprint(dna_seq_comp)\n\nprint(\"\".join([complement[base] for base in dna_seq]))\nprint(\"\".join([complement[base] for base in dna_seq if base == \"A\" or base == \"T\"]))\n\n['T', 'A', 'C', 'G', 'A', 'T', 'C', 'G']\nTACGATCG\nTACGATCG\nTAAT\n\n\n\n\n\n3.0.10 Example: Library generation\n\n\n3.0.11 [User]\n I want to generate mutant library of a protein. I have a nucleotide genbank file for the target protein. I wan to generate all the mutants by changing synonymous codons for each residue. can you give me the python code?\n\n\n\n3.0.12 [ChatGPT]\nCertainly! To generate a mutant library by changing synonymous codons for each residue of a protein, we’ll need to:\n\nRead the nucleotide sequence from a GenBank file.\nTranslate the nucleotide sequence to a protein sequence.\nIdentify synonymous codons for each amino acid.\nGenerate all possible synonymous mutants for the target protein.\n\nHere is the Python code that accomplishes these tasks:\n\n\n3.0.13 Example: Synonymous Mutant Library Generation\n\n이 예제는 위 프롬프트로 ChatGPT가 만든 코드입니다\n\n\n3.0.13.1 Install Necessary Libraries\nMake sure you have Biopython installed:\n\n!pip install biopython\n\nCollecting biopython\n  Downloading biopython-1.83-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.1/3.1 MB 26.0 MB/s eta 0:00:00\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from biopython) (1.25.2)\nInstalling collected packages: biopython\nSuccessfully installed biopython-1.83\n\n\n\n\n3.0.13.2 Python Script to Generate Synonymous Mutant Library\n\nfrom Bio import SeqIO\nfrom Bio.Seq import Seq\nfrom itertools import product\n\n# Synonymous codon table\nsynonymous_codons = {\n    'F': ['TTT', 'TTC'],\n    'L': ['TTA', 'TTG', 'CTT', 'CTC', 'CTA', 'CTG'],\n    'I': ['ATT', 'ATC', 'ATA'],\n    'M': ['ATG'],\n    'V': ['GTT', 'GTC', 'GTA', 'GTG'],\n    'S': ['TCT', 'TCC', 'TCA', 'TCG', 'AGT', 'AGC'],\n    'P': ['CCT', 'CCC', 'CCA', 'CCG'],\n    'T': ['ACT', 'ACC', 'ACA', 'ACG'],\n    'A': ['GCT', 'GCC', 'GCA', 'GCG'],\n    'Y': ['TAT', 'TAC'],\n    'H': ['CAT', 'CAC'],\n    'Q': ['CAA', 'CAG'],\n    'N': ['AAT', 'AAC'],\n    'K': ['AAA', 'AAG'],\n    'D': ['GAT', 'GAC'],\n    'E': ['GAA', 'GAG'],\n    'C': ['TGT', 'TGC'],\n    'W': ['TGG'],\n    'R': ['CGT', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG'],\n    'G': ['GGT', 'GGC', 'GGA', 'GGG'],\n    '*': ['TAA', 'TAG', 'TGA']\n}\n\n# Function to read the GenBank file and extract the coding sequence\ndef read_cds_from_genbank(file_path):\n    record = SeqIO.read(file_path, \"genbank\")\n    for feature in record.features:\n        if feature.type == \"CDS\":\n            return feature.location.extract(record).seq\n    raise ValueError(\"No CDS found in the GenBank file.\")\n\n# Function to generate synonymous mutants\ndef generate_synonymous_mutants(cds_seq):\n    protein_seq = cds_seq.translate()\n    codon_options = []\n\n    for aa in protein_seq[:5]:\n        codons = synonymous_codons.get(aa, [])\n        if not codons:\n            raise ValueError(f\"Unknown amino acid {aa} encountered.\")\n        codon_options.append(codons)\n\n    # Generate all combinations of synonymous codons\n    all_mutants = list(product(*codon_options))\n    return [''.join(mutant) for mutant in all_mutants]\n\n# Main function\ndef main(genbank_file, output_file):\n    cds_seq = read_cds_from_genbank(genbank_file)\n    mutants = generate_synonymous_mutants(cds_seq)\n\n    # Write the mutants to a FASTA file\n    with open(output_file, 'w') as f:\n        for i, mutant in enumerate(mutants):\n            f.write(f\"&gt;Mutant_{i+1}\\n{mutant}\\n\")\n\n# Example usage\ngenbank_file = 'egfp.gb'  # Replace with your GenBank file path\noutput_file = 'mutant_library.fasta'\nmain(genbank_file, output_file)\n\n\n위 코드를 두 개의 파일로 나누어 모듈 실습",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Python Basics</span>"
    ]
  },
  {
    "objectID": "cnu_data_handling.html",
    "href": "cnu_data_handling.html",
    "title": "4  Data handling",
    "section": "",
    "text": "4.0.0.1 구글 드라이브 연결\n\n!pwd\n\n/content\n\n\n\nfrom google.colab import drive\nimport os\n\ndrive.mount('/content/drive')\nos.chdir('drive/MyDrive/2024-cnu-lecture')\n\nMounted at /content/drive\n\n\n\n!pwd\n\n/content/drive/MyDrive/2024-cnu-lecture\n\n\n\n\n4.0.1 [User]\n I want to learn “2. Data Handling and Analysis”. can you explain me a brief explanation and examples? \n\n\n4.0.2 [ChatGPT]\nSure! Data handling and analysis are essential skills in Python, especially for tasks like manipulating datasets, performing statistical analyses, and creating visualizations. We’ll focus on the key libraries used for these purposes: NumPy, Pandas, and Matplotlib/Seaborn.\n\n\n4.0.3 1. NumPy\nNumPy is a powerful library for numerical operations and handling arrays.\n\n4.0.3.1 Basics of NumPy\nInstallation:\n!pip install numpy\n\nimport numpy as np\n\n\n# Creating a 1D array\narr1 = np.array([1, 2, 3, 4, 5])\n\n# Creating a 2D array\narr2 = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(arr1)\nprint(arr2)\n\n\n# Element-wise operations\narr3 = arr1 * 2\nprint(arr3)\n\n# Mathematical functions\nprint(np.sqrt(arr1))\n\n[1 2 3 4 5]\n[[1 2 3]\n [4 5 6]]\n[ 2  4  6  8 10]\n[1.         1.41421356 1.73205081 2.         2.23606798]\n\n\n\n\n4.0.3.2 Numpy 자료구조 ndarray\n\n행렬이나 다차원 배열 처리용 파이썬 라이브러리\n같은 타입의 데이터만 허용\n리스트에 비해 20배 이상 빠른 속도\n\n\n\n\nfrom https://www.oreilly.com/library/view/elegant-scipy/9781491922927/ch01.html\n\n\n\nnumpy 객체 만들기\n\n\nimport numpy as np\n\narr = [1, 2, 3]\nprint(arr)\nprint(type(arr))\n\na = np.array([1,2,3])\nprint(a)\nprint(a.dtype)\nprint(a.shape)\nprint(type(a))\n\n[1, 2, 3]\n&lt;class 'list'&gt;\n[1 2 3]\nint64\n(3,)\n&lt;class 'numpy.ndarray'&gt;\n\n\n\narr2 = np.array([[1,2,3], [4,5,6]])\nprint(arr2)\nprint(type(arr2))\nprint(arr2.shape)\nprint(arr2.dtype)\n\n[[1 2 3]\n [4 5 6]]\n&lt;class 'numpy.ndarray'&gt;\n(2, 3)\nint64\n\n\n\nnumpy 자료형\n\n부호가 있는 정수 int(8, 16, 32, 64)\n부호가 없는 정수 uint(8 ,16, 32, 54)\n실수 float(16, 32, 64, 128)\n복소수 complex(64, 128, 256)\n불리언 bool\n문자열 string_\n파이썬 오프젝트 object\n유니코드 unicode_\n\nnp.zeros(), np.ones(), np.arange()\n행렬 연산 지원\n\n\na = np.arange(1, 10).reshape(3,3) # [1, 10)\nprint(a)\na = np.ones((3,4), dtype=np.int16)\nb = np.ones((3,4), dtype=np.int16)\nprint(a)\nprint(b)\nprint(a+b)\nprint(a-b)\n\n\nnumpy 함수\n\nnp.sqrt()\nnp.log()\nnp.square()\nnp.log()\nnp.ceil()\nnp.floor()\nnp.isnan()\nnp.sum()\nnp.mean()\nnp.std()\nnp.min()\n\n\n\ndir(np)\n\n\n\n\n4.0.4 2. Pandas\nPandas is a powerful library for data manipulation and analysis. It provides data structures like DataFrame, which is similar to tables in databases or spreadsheets.\n\n4.0.4.1 Installation\npip install pandas\n\nPandas의 Series는 1차원, DataFrame은 2차원 데이터를 다루는 자료구조\nDataFrames are the primary data structure in pandas, representing tabular data with rows and columns.\nindex, column, values 로 이루어짐\n리스트와 딕셔너리로부터 생성 가능\n숫자형, 문자형, 범주형 등의 다양한 데이터 입력 가능\n\n\n\n\nalt text\n\n\n\nfrom pandas import Series, DataFrame\n\n\ngenes = Series([0.1, 0.2, 1.4, 0.6, 1.1])\nprint(genes)\n\n0    0.1\n1    0.2\n2    1.4\n3    0.6\n4    1.1\ndtype: float64\n\n\n\ngenes = Series([0.1, 0.2, 1.4, 0.6, 1.1], index=['A', 'B', 'C', 'D', 'E'])\nprint(genes)\n\nA    0.1\nB    0.2\nC    1.4\nD    0.6\nE    1.1\ndtype: float64\n\n\n\n\n4.0.4.2 Make a DataFrame\n\nCreate from a list\n\n\nimport pandas as pd\n\ndf = pd.DataFrame([[0, 4, 5], [0, 6, 7], [20, 30, 40]],\n                  index=[1, 2, 3], columns=['P', 'Q', 'R'])\n\nprint(df)\n\n    P   Q   R\n1   0   4   5\n2   0   6   7\n3  20  30  40\n\n\n\nCreate dataframe from a dictionary\n\n\nimport pandas as pd\n\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Age': [25, 30, 35],\n    'Height': [5.5, 6.0, 5.8]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n      Name  Age  Height\n0    Alice   25     5.5\n1      Bob   30     6.0\n2  Charlie   35     5.8\n\n\n\nCreate from a list of dictionary\n\n\ndata = [\n    {'Name': 'Alice', 'Age': 25, 'Height': 5.5},\n    {'Name': 'Bob', 'Age': 30, 'Height': 6.0},\n    {'Name': 'Charlie', 'Age': 35, 'Height': 5.8}\n]\n\ndf = pd.DataFrame(data)\nprint(df)\n\n      Name  Age  Height\n0    Alice   25     5.5\n1      Bob   30     6.0\n2  Charlie   35     5.8\n\n\n\nCreate from Series\n\n\ngenes = {'A': [0.5, 0.1, 0.3],\n         'B': [0.8, 0.9, 0.4]}\nprint(genes)\ngenes_df = DataFrame(genes)\nprint(genes_df)\nprint(genes_df['A'])\nprint(type(genes_df['A']))\n\n\ngenes_df = DataFrame(genes, columns=['B', 'A'], index=['day1', 'day2', 'day3'])\nprint(genes_df)\n\n{'A': [0.5, 0.1, 0.3], 'B': [0.8, 0.9, 0.4]}\n     A    B\n0  0.5  0.8\n1  0.1  0.9\n2  0.3  0.4\n0    0.5\n1    0.1\n2    0.3\nName: A, dtype: float64\n&lt;class 'pandas.core.series.Series'&gt;\n        B    A\nday1  0.8  0.5\nday2  0.9  0.1\nday3  0.4  0.3\n\n\n\n\n4.0.4.3 Dataframe operations\n\ndata = [\n    {'Name': 'Alice', 'Age': 25, 'Height': 5.5},\n    {'Name': 'Bob', 'Age': 30, 'Height': 6.0},\n    {'Name': 'Charlie', 'Age': 35, 'Height': 5.8}\n]\n\ndf = pd.DataFrame(data)\nprint(df)\n\n\n      Name  Age  Height\n0    Alice   25     5.5\n1      Bob   30     6.0\n2  Charlie   35     5.8\n\n\n\n# Selecting columns\nages = df['Age']\nprint(ages)\n\n# Filtering rows\nadults = df[df['Age'] &gt; 18]\nprint(adults)\n\n# Adding a new column\ndf['Weight'] = [65, 70, 75]\nprint(df)\n\n# Grouping and Aggregating\ngrouped = df.groupby('Name').mean()\nprint(grouped)\n\n0    25\n1    30\n2    35\nName: Age, dtype: int64\n      Name  Age  Height\n0    Alice   25     5.5\n1      Bob   30     6.0\n2  Charlie   35     5.8\n      Name  Age  Height  Weight\n0    Alice   25     5.5      65\n1      Bob   30     6.0      70\n2  Charlie   35     5.8      75\n          Age  Height  Weight\nName                         \nAlice    25.0     5.5    65.0\nBob      30.0     6.0    70.0\nCharlie  35.0     5.8    75.0\n\n\n\n인덱스 자동 정렬, 행렬 연산\n\n\ngenes1 = Series([0.1, 0.2, 1.4, 0.6, 1.1], index=['A', 'B', 'C', 'D', 'E'])\ngenes2 = Series([0.1, 0.2, 1.4, 0.6, 1.1], index=['B', 'C', 'D', 'E', 'A'])\ngenes1 + genes2\n\nA    1.2\nB    0.3\nC    1.6\nD    2.0\nE    1.7\ndtype: float64\n\n\n\nprint(genes2.sort_values())\nprint(genes2.sort_index())\n\nB    0.1\nC    0.2\nE    0.6\nA    1.1\nD    1.4\ndtype: float64\nA    1.1\nB    0.1\nC    0.2\nD    1.4\nE    0.6\ndtype: float64\n\n\n\nprint(genes_df['A'])\nprint(genes_df.loc['day1'])\nprint(genes_df.index)\nprint(list(genes_df.columns))\n\nday1    0.5\nday2    0.1\nday3    0.3\nName: A, dtype: float64\nB    0.8\nA    0.5\nName: day1, dtype: float64\nIndex(['day1', 'day2', 'day3'], dtype='object')\n['B', 'A']\n\n\n\n\n\n4.0.5 3. Matplotlib/Seaborn\nMatplotlib is a plotting library for creating static, animated, and interactive visualizations. Seaborn is built on top of Matplotlib and provides a high-level interface for drawing attractive statistical graphics.\nInstallation:\npip install matplotlib seaborn\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Line plot\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Line Plot')\nplt.show()\n\n\n\n\n\n\n\n\n\ndata = [\n    {'Name': 'Alice', 'Age': 25, 'Height': 5.5},\n    {'Name': 'Bob', 'Age': 30, 'Height': 6.0},\n    {'Name': 'Charlie', 'Age': 35, 'Height': 5.8}\n]\n\ndf = pd.DataFrame(data)\nprint(df)\n\n# Scatter plot with Seaborn\nsns.scatterplot(x='Age', y='Height', data=df)\nplt.title('Age vs Height')\nplt.show()\n\n      Name  Age  Height\n0    Alice   25     5.5\n1      Bob   30     6.0\n2  Charlie   35     5.8\n\n\n\n\n\n\n\n\n\n\n\n4.0.6 Example: Analyzing and Visualizing DNA Sequence Data\nLet’s combine these libraries in a practical example. We’ll read a CSV file containing DNA sequences and their properties, perform some analysis, and visualize the results.\n\n\n\nalt text\n\n\n\n\n\nalt text\n\n\n\n\n4.0.7 [User]\n I have downloaded a fasta file containing 800 esterase nucleotide sequences. the file is saved at “data/esterase.fa”. can you provide a python code that can read the sequences and compute their length and GC contents ratio? \n\n\n4.0.8 [ChatGPT]\nCertainly! To read a FASTA file containing 800 esterase nucleotide sequences and compute their lengths and GC content ratios, you can use the Biopython library. Here is a Python script that accomplishes this:\nInstallation\nFirst, make sure you have Biopython installed:\npip install biopython\n\nfrom Bio import SeqIO\nfrom Bio.SeqUtils import gc_fraction\n\n# Function to compute sequence length and GC content\ndef compute_sequence_stats(seq):\n    length = len(seq)\n    gc_content = gc_fraction(seq) * 100  # Convert to percentage\n    return length, gc_content\n\n# Read the FASTA file and process each sequence\ndef process_fasta_file(file_path):\n    records = SeqIO.parse(file_path, \"fasta\")\n    esterase_stats = []\n\n    for record in records:\n        length, gc_content = compute_sequence_stats(record.seq)\n        esterase_stats.append({\n            \"ID\": record.id,\n            \"Length\": length,\n            \"GC_Content\": gc_content\n        })\n\n    return esterase_stats\n\n# Example usage\nfasta_file = 'data/esterases.fasta'  # Replace with your FASTA file path\nesterase_stats = process_fasta_file(fasta_file)\n\n# Print the results\nfor esterase in esterase_stats:\n    print(f\"ID: {esterase['ID']}, Length: {esterase['Length']} bp, GC Content: {esterase['GC_Content']:.2f}%\")\n\nID: EU240725.1, Length: 240 bp, GC Content: 50.83%\nID: NZ_JBBEZD010000544.1, Length: 387 bp, GC Content: 48.06%\nID: NZ_JADOYP010000246.1, Length: 234 bp, GC Content: 55.98%\nID: NZ_JAJAQZ010000712.1, Length: 252 bp, GC Content: 52.78%\nID: NZ_JABFYM010000640.1, Length: 769 bp, GC Content: 52.41%\nID: NZ_CAMPQZ010000345.1, Length: 238 bp, GC Content: 46.64%\nID: NZ_CAMPRQ010000186.1, Length: 259 bp, GC Content: 55.98%\nID: NZ_BFME01000059.1, Length: 302 bp, GC Content: 52.32%\nID: NZ_BFNB01000360.1, Length: 358 bp, GC Content: 46.93%\nID: NZ_JAIMGN010001194.1, Length: 242 bp, GC Content: 42.98%\nID: NZ_VCLZ01000187.1, Length: 251 bp, GC Content: 41.83%\nID: NZ_JAHCTM010000616.1, Length: 275 bp, GC Content: 64.36%\nID: NZ_JAOCNI010000713.1, Length: 230 bp, GC Content: 66.09%\nID: NZ_FZHS01000431.1, Length: 334 bp, GC Content: 52.99%\nID: NZ_CDRU01000784.1, Length: 1944 bp, GC Content: 50.51%\nID: NZ_JAPIWR010000154.1, Length: 658 bp, GC Content: 75.68%\nID: VZFW01000303.1, Length: 420 bp, GC Content: 50.00%\nID: VZHW01000363.1, Length: 398 bp, GC Content: 56.28%\nID: POSU01001761.1, Length: 387 bp, GC Content: 56.07%\nID: POSU01001762.1, Length: 387 bp, GC Content: 55.56%\nID: MOKZ01001167.1, Length: 1295 bp, GC Content: 58.15%\nID: MOKW01000234.1, Length: 901 bp, GC Content: 56.16%\nID: LQWH01000145.1, Length: 1842 bp, GC Content: 49.84%\nID: NZ_NMMG01000172.1, Length: 435 bp, GC Content: 52.41%\nID: NZ_JBBEYZ010000773.1, Length: 414 bp, GC Content: 51.21%\nID: NZ_JAWCWY010000189.1, Length: 816 bp, GC Content: 58.21%\nID: NZ_JAKGPJ010000465.1, Length: 1925 bp, GC Content: 52.05%\nID: NZ_JAYKFE010000133.1, Length: 418 bp, GC Content: 53.11%\nID: NZ_JASKOE010000543.1, Length: 1381 bp, GC Content: 52.93%\nID: NZ_JANDAG010000204.1, Length: 387 bp, GC Content: 48.32%\nID: NZ_UNQA01000192.1, Length: 525 bp, GC Content: 41.90%\nID: NZ_JALSGF010000656.1, Length: 318 bp, GC Content: 56.92%\nID: NZ_JAXASU010000125.1, Length: 404 bp, GC Content: 53.22%\nID: NZ_CAMPQZ010000078.1, Length: 253 bp, GC Content: 55.34%\nID: NZ_CAMPRA010000231.1, Length: 240 bp, GC Content: 59.58%\nID: NZ_JAFBGI010000456.1, Length: 433 bp, GC Content: 51.27%\nID: NZ_WIKF01000117.1, Length: 345 bp, GC Content: 51.59%\nID: NZ_SQBJ01000285.1, Length: 309 bp, GC Content: 40.37%\nID: NZ_JABXCQ010000511.1, Length: 250 bp, GC Content: 49.20%\nID: NZ_JABXCQ010000334.1, Length: 897 bp, GC Content: 48.27%\nID: NZ_JALXTX010000126.1, Length: 250 bp, GC Content: 52.00%\nID: NZ_JACVXQ010000192.1, Length: 301 bp, GC Content: 59.47%\nID: NZ_WSGZ01000048.1, Length: 392 bp, GC Content: 59.44%\nID: NZ_WMDV01000102.1, Length: 404 bp, GC Content: 48.51%\nID: NZ_JAHUVQ010000349.1, Length: 305 bp, GC Content: 36.07%\nID: NZ_JAFBLC010000206.1, Length: 244 bp, GC Content: 50.82%\nID: NZ_JABFJA010000380.1, Length: 249 bp, GC Content: 56.63%\nID: NZ_VKTP01000522.1, Length: 203 bp, GC Content: 34.48%\nID: BIEQ01000022.1, Length: 1026 bp, GC Content: 40.16%\nID: BIEV01000121.1, Length: 1963 bp, GC Content: 37.75%\nID: NZ_PXKG01001199.1, Length: 213 bp, GC Content: 59.15%\nID: NZ_PGKH01000185.1, Length: 621 bp, GC Content: 60.23%\nID: NZ_BFSO01000003.1, Length: 306 bp, GC Content: 57.84%\nID: NZ_BGVT01000816.1, Length: 250 bp, GC Content: 55.60%\nID: NZ_BGNW01000289.1, Length: 433 bp, GC Content: 49.88%\nID: BGJE01000624.1, Length: 794 bp, GC Content: 41.18%\nID: BGGJ01000082.1, Length: 1531 bp, GC Content: 37.69%\nID: BGFB01000003.1, Length: 1259 bp, GC Content: 37.49%\nID: BFOB01000018.1, Length: 1751 bp, GC Content: 43.86%\nID: NZ_JAMSHV010000369.1, Length: 230 bp, GC Content: 62.61%\nID: NZ_VFYT01000041.1, Length: 267 bp, GC Content: 50.19%\nID: NZ_JAUCLC010000223.1, Length: 474 bp, GC Content: 51.48%\nID: NZ_QZWA01000423.1, Length: 317 bp, GC Content: 49.21%\nID: NZ_VKYH01000130.1, Length: 313 bp, GC Content: 58.79%\nID: NZ_WJGC01000209.1, Length: 278 bp, GC Content: 39.57%\nID: NZ_VDDM01000397.1, Length: 241 bp, GC Content: 51.04%\nID: NZ_VDDM01000254.1, Length: 241 bp, GC Content: 50.62%\nID: NZ_QWNL01000169.1, Length: 1281 bp, GC Content: 53.79%\nID: NZ_PXLT01000452.1, Length: 230 bp, GC Content: 56.52%\nID: NZ_UIMI01000098.1, Length: 404 bp, GC Content: 53.22%\nID: NZ_UIMM01000082.1, Length: 404 bp, GC Content: 53.22%\nID: NZ_UIKF01000110.1, Length: 345 bp, GC Content: 51.30%\nID: NZ_UIIK01000146.1, Length: 319 bp, GC Content: 50.16%\nID: NZ_NJKQ01000156.1, Length: 345 bp, GC Content: 51.30%\nID: NZ_CDQY01000268.1, Length: 1957 bp, GC Content: 50.38%\nID: NZ_AZBZ01000307.1, Length: 228 bp, GC Content: 52.63%\nID: NZ_PGKZ01000379.1, Length: 424 bp, GC Content: 50.94%\nID: NZ_JAJNPL010000139.1, Length: 272 bp, GC Content: 44.12%\nID: WSIG01000534.1, Length: 481 bp, GC Content: 43.24%\nID: WSIJ01000343.1, Length: 794 bp, GC Content: 54.53%\nID: VZEG01000574.1, Length: 779 bp, GC Content: 51.48%\nID: VTVU01000709.1, Length: 1696 bp, GC Content: 50.12%\nID: VTVU01000775.1, Length: 1567 bp, GC Content: 52.14%\nID: VTVU01001116.1, Length: 872 bp, GC Content: 52.41%\nID: VTVS01000598.1, Length: 1993 bp, GC Content: 50.68%\nID: VTWB01000880.1, Length: 1080 bp, GC Content: 53.98%\nID: QYOH01000268.1, Length: 1302 bp, GC Content: 39.25%\nID: VSBS01001006.1, Length: 1817 bp, GC Content: 50.69%\nID: VSBS01001719.1, Length: 1009 bp, GC Content: 53.62%\nID: VSBS01002136.1, Length: 726 bp, GC Content: 50.96%\nID: VCLZ01000187.1, Length: 251 bp, GC Content: 41.83%\nID: RRWE01000075.1, Length: 686 bp, GC Content: 54.66%\nID: RDDM01001373.1, Length: 679 bp, GC Content: 52.72%\nID: RDDM01001374.1, Length: 679 bp, GC Content: 52.72%\nID: QZWA01000423.1, Length: 317 bp, GC Content: 49.21%\nID: QWNV01001428.1, Length: 1642 bp, GC Content: 53.23%\nID: QWNL01000169.1, Length: 1281 bp, GC Content: 53.79%\nID: QXHA01000278.1, Length: 908 bp, GC Content: 49.67%\nID: QXHA01000653.1, Length: 212 bp, GC Content: 58.02%\nID: PNRN01000418.1, Length: 330 bp, GC Content: 44.85%\nID: QOFG01000257.1, Length: 678 bp, GC Content: 55.01%\nID: QOEN01000147.1, Length: 678 bp, GC Content: 55.01%\nID: QMKN01000315.1, Length: 269 bp, GC Content: 29.74%\nID: PVOT01000631.1, Length: 1602 bp, GC Content: 52.06%\nID: PTNY01000777.1, Length: 1212 bp, GC Content: 51.98%\nID: PTNY01001592.1, Length: 581 bp, GC Content: 49.74%\nID: POSY01000247.1, Length: 275 bp, GC Content: 67.64%\nID: NWSA01001215.1, Length: 1416 bp, GC Content: 46.75%\nID: NSEH01000513.1, Length: 987 bp, GC Content: 40.53%\nID: NSEG01000063.1, Length: 590 bp, GC Content: 38.47%\nID: NSEG01000567.1, Length: 945 bp, GC Content: 41.06%\nID: LYYB01001385.1, Length: 350 bp, GC Content: 56.29%\nID: LYYB01002058.1, Length: 350 bp, GC Content: 56.29%\nID: LYCC01003203.1, Length: 663 bp, GC Content: 54.75%\nID: LYCC01003217.1, Length: 663 bp, GC Content: 55.05%\nID: LYAA01000061.1, Length: 993 bp, GC Content: 34.34%\nID: LYAA01000929.1, Length: 1501 bp, GC Content: 36.91%\nID: LYAA01001061.1, Length: 403 bp, GC Content: 38.46%\nID: NBCM01001023.1, Length: 398 bp, GC Content: 39.95%\nID: NAFP01000067.1, Length: 462 bp, GC Content: 41.13%\nID: LGLZ01000021.1, Length: 1602 bp, GC Content: 54.00%\nID: MQME01000213.1, Length: 402 bp, GC Content: 41.79%\nID: MOKM01000371.1, Length: 869 bp, GC Content: 32.91%\nID: MOKM01000528.1, Length: 872 bp, GC Content: 35.55%\nID: MOHK01000416.1, Length: 1644 bp, GC Content: 38.69%\nID: MOFV01000270.1, Length: 1176 bp, GC Content: 37.16%\nID: AZCA01000227.1, Length: 900 bp, GC Content: 54.33%\nID: AZCA01000274.1, Length: 562 bp, GC Content: 53.91%\nID: KJ652913.1, Length: 1209 bp, GC Content: 48.39%\nID: GQ167140.1, Length: 894 bp, GC Content: 51.79%\nID: GQ167139.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167138.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167137.1, Length: 894 bp, GC Content: 51.45%\nID: GQ167136.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167135.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167134.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167133.1, Length: 894 bp, GC Content: 51.12%\nID: GQ167132.1, Length: 894 bp, GC Content: 51.12%\nID: GQ167131.1, Length: 894 bp, GC Content: 51.01%\nID: GQ167130.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167129.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167128.1, Length: 894 bp, GC Content: 51.12%\nID: GQ167127.1, Length: 894 bp, GC Content: 51.01%\nID: GQ167126.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167125.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167124.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167123.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167122.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167121.1, Length: 894 bp, GC Content: 51.12%\nID: GQ167120.1, Length: 894 bp, GC Content: 51.57%\nID: GQ167119.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167118.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167117.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167116.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167115.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167114.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167113.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167112.1, Length: 894 bp, GC Content: 52.01%\nID: GQ167111.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167110.1, Length: 894 bp, GC Content: 51.79%\nID: GQ167109.1, Length: 894 bp, GC Content: 52.13%\nID: GQ167108.1, Length: 894 bp, GC Content: 52.13%\nID: GQ167107.1, Length: 894 bp, GC Content: 52.13%\nID: GQ167106.1, Length: 894 bp, GC Content: 52.13%\nID: GQ167105.1, Length: 894 bp, GC Content: 51.57%\nID: GQ167104.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167103.1, Length: 894 bp, GC Content: 52.13%\nID: GQ167102.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167101.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167100.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167099.1, Length: 894 bp, GC Content: 51.45%\nID: GQ167098.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167097.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167096.1, Length: 894 bp, GC Content: 51.34%\nID: GQ167095.1, Length: 894 bp, GC Content: 51.45%\nID: GQ167094.1, Length: 894 bp, GC Content: 51.45%\nID: GQ167093.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167092.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167091.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167090.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167089.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167088.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167087.1, Length: 894 bp, GC Content: 51.45%\nID: GQ167086.1, Length: 894 bp, GC Content: 51.45%\nID: GQ167085.1, Length: 894 bp, GC Content: 51.57%\nID: GQ167084.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167083.1, Length: 894 bp, GC Content: 51.23%\nID: GQ167082.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167081.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167080.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167079.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167078.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167077.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167076.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167075.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167074.1, Length: 894 bp, GC Content: 51.68%\nID: GQ167073.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167072.1, Length: 894 bp, GC Content: 52.01%\nID: GQ167071.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167070.1, Length: 894 bp, GC Content: 51.90%\nID: GQ167069.1, Length: 894 bp, GC Content: 51.90%\nID: EU904569.1, Length: 1125 bp, GC Content: 54.31%\nID: EU904568.1, Length: 1125 bp, GC Content: 54.31%\nID: EU904567.1, Length: 1125 bp, GC Content: 54.31%\nID: EU904566.1, Length: 1125 bp, GC Content: 54.31%\nID: EU904565.1, Length: 1125 bp, GC Content: 54.31%\nID: EU898869.1, Length: 837 bp, GC Content: 54.36%\nID: EU898868.1, Length: 837 bp, GC Content: 54.36%\nID: EU898867.1, Length: 837 bp, GC Content: 54.36%\nID: EU898866.1, Length: 837 bp, GC Content: 54.36%\nID: EU898865.1, Length: 837 bp, GC Content: 54.36%\nID: EU905469.1, Length: 834 bp, GC Content: 48.92%\nID: EU905468.1, Length: 834 bp, GC Content: 48.92%\nID: EU905467.1, Length: 834 bp, GC Content: 48.92%\nID: EU905466.1, Length: 834 bp, GC Content: 48.92%\nID: EU905465.1, Length: 834 bp, GC Content: 48.92%\nID: J04216.1, Length: 1997 bp, GC Content: 53.33%\nID: OQ354675.1, Length: 150 bp, GC Content: 53.33%\nID: MH208303.1, Length: 562 bp, GC Content: 48.75%\nID: MK176600.1, Length: 365 bp, GC Content: 50.68%\nID: JF806497.1, Length: 1282 bp, GC Content: 50.39%\nID: AY230883.1, Length: 405 bp, GC Content: 57.53%\nID: NG_047765.1, Length: 1421 bp, GC Content: 49.89%\nID: KT033766.1, Length: 362 bp, GC Content: 46.41%\nID: KP965724.1, Length: 590 bp, GC Content: 48.64%\nID: KM489072.1, Length: 960 bp, GC Content: 51.56%\nID: X03988.1, Length: 1906 bp, GC Content: 42.39%\nID: NG_047768.1, Length: 1460 bp, GC Content: 37.95%\nID: NG_052372.1, Length: 1706 bp, GC Content: 47.19%\nID: NG_047769.1, Length: 1460 bp, GC Content: 38.05%\nID: NG_047766.1, Length: 1421 bp, GC Content: 50.11%\nID: NZ_JAVUPC010000141.1, Length: 737 bp, GC Content: 53.73%\nID: NZ_JABXCP010000153.1, Length: 1430 bp, GC Content: 54.41%\nID: NZ_JAALJG010000524.1, Length: 1151 bp, GC Content: 54.13%\nID: NZ_SQCG01000189.1, Length: 1533 bp, GC Content: 55.09%\nID: NZ_JAOCNI010000075.1, Length: 1153 bp, GC Content: 54.12%\nID: SCJN01000574.1, Length: 1656 bp, GC Content: 54.95%\nID: WSIA01000575.1, Length: 534 bp, GC Content: 54.31%\nID: VZHX01000756.1, Length: 400 bp, GC Content: 52.25%\nID: VUDU01000077.1, Length: 992 bp, GC Content: 56.75%\nID: MCNL01000086.1, Length: 1274 bp, GC Content: 55.42%\nID: NZ_PGJY01000179.1, Length: 640 bp, GC Content: 49.06%\nID: NZ_PGKT01000479.1, Length: 639 bp, GC Content: 53.99%\nID: NZ_JALLLE010000239.1, Length: 560 bp, GC Content: 55.89%\nID: NZ_JALLLE010000238.1, Length: 560 bp, GC Content: 55.71%\nID: NZ_QOZZ01001003.1, Length: 772 bp, GC Content: 47.67%\nID: NZ_QOZZ01000907.1, Length: 1663 bp, GC Content: 48.23%\nID: NZ_JAKFZI010000544.1, Length: 266 bp, GC Content: 57.89%\nID: NZ_JAKFZI010000543.1, Length: 266 bp, GC Content: 58.65%\nID: NZ_NLSG01000489.1, Length: 515 bp, GC Content: 48.16%\nID: NZ_NLWB01000258.1, Length: 247 bp, GC Content: 53.85%\nID: LC807390.1, Length: 1324 bp, GC Content: 51.66%\nID: NZ_BLBU01000274.1, Length: 1415 bp, GC Content: 53.85%\nID: NZ_BLBW01000651.1, Length: 374 bp, GC Content: 36.90%\nID: NZ_BLBW01000574.1, Length: 1711 bp, GC Content: 42.78%\nID: NZ_JAPTOK010000080.1, Length: 554 bp, GC Content: 57.22%\nID: NZ_JAPTOK010000079.1, Length: 554 bp, GC Content: 57.76%\nID: NZ_JAPTOK010000060.1, Length: 1516 bp, GC Content: 54.09%\nID: NZ_JAPTPP010000079.1, Length: 552 bp, GC Content: 57.79%\nID: NZ_JAPTPP010000078.1, Length: 552 bp, GC Content: 57.25%\nID: NZ_JAPTPP010000058.1, Length: 1517 bp, GC Content: 54.05%\nID: NZ_JAQMZG010000380.1, Length: 240 bp, GC Content: 50.42%\nID: NZ_JAXBSQ010000126.1, Length: 388 bp, GC Content: 51.03%\nID: NZ_JBANPU010000107.1, Length: 1333 bp, GC Content: 46.96%\nID: NZ_JBANPR010000110.1, Length: 1333 bp, GC Content: 46.96%\nID: NZ_JBANOT010000157.1, Length: 468 bp, GC Content: 57.91%\nID: NZ_JBANOT010000156.1, Length: 468 bp, GC Content: 57.48%\nID: NZ_JASKOE010000545.1, Length: 567 bp, GC Content: 50.44%\nID: NZ_JAOCNI010000743.1, Length: 211 bp, GC Content: 55.45%\nID: NZ_JAJPUM010000249.1, Length: 1840 bp, GC Content: 55.27%\nID: NZ_JADOYS010000667.1, Length: 720 bp, GC Content: 50.83%\nID: NZ_JADOYS010000238.1, Length: 723 bp, GC Content: 56.15%\nID: NZ_NWPQ01000314.1, Length: 250 bp, GC Content: 48.00%\nID: NZ_JAYKFR010000158.1, Length: 442 bp, GC Content: 46.83%\nID: NZ_JAYKFH010000061.1, Length: 424 bp, GC Content: 47.88%\nID: NZ_JAYKFK010000074.1, Length: 458 bp, GC Content: 49.13%\nID: NZ_JAYKFJ010000076.1, Length: 424 bp, GC Content: 56.37%\nID: NZ_JAZEUR010000218.1, Length: 667 bp, GC Content: 53.22%\nID: NZ_JAZEUR010000088.1, Length: 1076 bp, GC Content: 50.00%\nID: NZ_PGOF01000221.1, Length: 233 bp, GC Content: 35.19%\nID: NZ_JAWCXI010000322.1, Length: 224 bp, GC Content: 58.93%\nID: NZ_JAWCXL010000294.1, Length: 215 bp, GC Content: 49.30%\nID: NZ_JAWCXJ010000216.1, Length: 224 bp, GC Content: 58.93%\nID: NZ_JAWCXS010000345.1, Length: 210 bp, GC Content: 53.33%\nID: NZ_JAWCZY010000183.1, Length: 224 bp, GC Content: 57.59%\nID: NZ_JAJOGD010000228.1, Length: 391 bp, GC Content: 46.80%\nID: PP210101.1, Length: 843 bp, GC Content: 48.52%\nID: NZ_JAVHUR010000573.1, Length: 735 bp, GC Content: 52.38%\nID: NZ_JAVUPD010001496.1, Length: 232 bp, GC Content: 53.88%\nID: NZ_JAVUPD010000434.1, Length: 357 bp, GC Content: 56.58%\nID: NZ_JAVUPD010000120.1, Length: 773 bp, GC Content: 58.47%\nID: NZ_JANCZM010000126.1, Length: 1823 bp, GC Content: 50.58%\nID: NZ_JANCZO010000264.1, Length: 560 bp, GC Content: 39.29%\nID: NZ_CAIZEY010000334.1, Length: 207 bp, GC Content: 48.79%\nID: NZ_JAKMCD010000715.1, Length: 294 bp, GC Content: 48.98%\nID: NZ_JAKMBP010000369.1, Length: 250 bp, GC Content: 58.00%\nID: NZ_JAKMBR010000582.1, Length: 246 bp, GC Content: 54.47%\nID: NZ_JAKMCL010000625.1, Length: 244 bp, GC Content: 47.95%\nID: NZ_JAKMCL010000451.1, Length: 329 bp, GC Content: 51.06%\nID: NZ_JAJARC010000160.1, Length: 422 bp, GC Content: 50.24%\nID: NZ_SERV01000144.1, Length: 255 bp, GC Content: 53.33%\nID: NZ_SERV01000141.1, Length: 255 bp, GC Content: 54.90%\nID: NZ_SERV01000104.1, Length: 379 bp, GC Content: 51.19%\nID: NZ_SERV01000087.1, Length: 480 bp, GC Content: 57.71%\nID: NZ_JAKFUB010000128.1, Length: 1151 bp, GC Content: 53.43%\nID: NZ_JAKFSS010000096.1, Length: 780 bp, GC Content: 57.44%\nID: NZ_JAKFSS010000095.1, Length: 780 bp, GC Content: 57.44%\nID: NZ_JAKFSS010000074.1, Length: 1383 bp, GC Content: 54.23%\nID: NZ_CCQT01000135.1, Length: 1119 bp, GC Content: 48.79%\nID: NZ_CCQQ01000116.1, Length: 1107 bp, GC Content: 49.23%\nID: NZ_JALSGF010000752.1, Length: 296 bp, GC Content: 55.07%\nID: NZ_VKOU01000247.1, Length: 460 bp, GC Content: 51.09%\nID: NZ_JAJCFL010000228.1, Length: 221 bp, GC Content: 47.51%\nID: NZ_JAHTGQ010000161.1, Length: 409 bp, GC Content: 50.61%\nID: NZ_JAHTGQ010000160.1, Length: 409 bp, GC Content: 50.86%\nID: NZ_JAIZZG010000075.1, Length: 1654 bp, GC Content: 53.87%\nID: NZ_CAJSLO010000311.1, Length: 227 bp, GC Content: 51.54%\nID: NZ_CAJSIT010000424.1, Length: 212 bp, GC Content: 53.30%\nID: NZ_JAIMGT010000240.1, Length: 269 bp, GC Content: 58.36%\nID: NZ_JAHCWX010000222.1, Length: 398 bp, GC Content: 56.03%\nID: NZ_JAHCWX010000212.1, Length: 480 bp, GC Content: 57.71%\nID: NZ_JAHCWX010000209.1, Length: 512 bp, GC Content: 53.91%\nID: NZ_JAHCWX010000201.1, Length: 626 bp, GC Content: 52.56%\nID: NZ_JAHCWX010000200.1, Length: 634 bp, GC Content: 52.21%\nID: NZ_JAHCWX010000185.1, Length: 955 bp, GC Content: 54.97%\nID: NZ_JAINSC010000068.1, Length: 379 bp, GC Content: 50.92%\nID: NZ_JAINSC010000053.1, Length: 585 bp, GC Content: 52.99%\nID: NZ_CAMPQZ010000124.1, Length: 232 bp, GC Content: 50.86%\nID: NZ_CAMPRO010000756.1, Length: 263 bp, GC Content: 55.51%\nID: NZ_CAMPQN010000114.1, Length: 382 bp, GC Content: 49.21%\nID: NZ_CAMPRF010000209.1, Length: 229 bp, GC Content: 50.66%\nID: NZ_CAMPRN010000109.1, Length: 244 bp, GC Content: 50.82%\nID: NZ_CAMPRP010000526.1, Length: 365 bp, GC Content: 54.25%\nID: NZ_CAMPRA010000395.1, Length: 242 bp, GC Content: 55.79%\nID: NZ_CAMPQX010000466.1, Length: 337 bp, GC Content: 50.45%\nID: NZ_JAODWX010000135.1, Length: 468 bp, GC Content: 57.69%\nID: NZ_JAODWX010000134.1, Length: 468 bp, GC Content: 57.48%\nID: NZ_JAODWX010000096.1, Length: 976 bp, GC Content: 53.59%\nID: NZ_JAVXXR010000186.1, Length: 315 bp, GC Content: 50.79%\nID: NZ_JAVXXU010000105.1, Length: 276 bp, GC Content: 52.17%\nID: NZ_CYBF01000366.1, Length: 455 bp, GC Content: 45.93%\nID: NZ_JAVUOZ010000614.1, Length: 370 bp, GC Content: 44.86%\nID: NZ_JAVUOZ010000551.1, Length: 398 bp, GC Content: 59.05%\nID: NZ_JAVUOZ010000319.1, Length: 532 bp, GC Content: 55.45%\nID: NZ_JAVUPC010000692.1, Length: 266 bp, GC Content: 56.77%\nID: NZ_JAVUPC010000403.1, Length: 352 bp, GC Content: 56.53%\nID: NZ_JAVUPC010000400.1, Length: 353 bp, GC Content: 56.09%\nID: NZ_JAVUPF010000560.1, Length: 303 bp, GC Content: 57.10%\nID: NZ_JAVUPF010000552.1, Length: 306 bp, GC Content: 57.19%\nID: NZ_JAVUPK010001228.1, Length: 268 bp, GC Content: 44.03%\nID: NZ_JAGMPD010000204.1, Length: 279 bp, GC Content: 51.25%\nID: NZ_JAGMPD010000203.1, Length: 279 bp, GC Content: 51.61%\nID: NZ_JAGMPD010000188.1, Length: 377 bp, GC Content: 55.97%\nID: NZ_JAGMPD010000181.1, Length: 418 bp, GC Content: 54.78%\nID: NZ_JAGMPD010000180.1, Length: 246 bp, GC Content: 53.25%\n\n\n\nwith open('data/dna_data.csv', 'w') as f:\n    f.write('Sequence,Length,GC_Content\\n')\n    f.write('ATGCGTACGTAGCTAGCTAG,20,50\\n')\n    f.write('TGCATGCATGCTAGCTAGCAATAT,24,45.0\\n')\n    f.write('GCGTACGTAGCTAGCTAG,18,55.0\\n')\n    f.write('TGCATGCATGCTAGCTAGCA,20,45.0')\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read the CSV file\ndf = pd.read_csv('data/dna_data.csv')\n\n# Calculate basic statistics\nmean_gc = df['GC_Content'].mean()\nstd_gc = df['GC_Content'].std()\n\nprint(f\"Mean GC Content: {mean_gc:.2f}%\")\nprint(f\"Standard Deviation of GC Content: {std_gc:.2f}%\")\n\n# Visualize the data\nplt.figure(figsize=(10, 5))\n\n# Histogram of GC content\nplt.subplot(1, 2, 1)\nsns.histplot(df['GC_Content'], kde=True)\nplt.title('GC Content Distribution')\nplt.xlabel('GC Content (%)')\n\n# Boxplot of sequence lengths\nplt.subplot(1, 2, 2)\nsns.boxplot(x=df['Length'])\nplt.title('Sequence Length Distribution')\nplt.xlabel('Length (bp)')\n\nplt.tight_layout()\nplt.show()\n\nMean GC Content: 48.75%\nStandard Deviation of GC Content: 4.79%",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data handling</span>"
    ]
  }
]